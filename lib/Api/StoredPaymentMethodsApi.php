<?php
/**
 * StoredPaymentMethodsApi
 * PHP version 5
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CpaymentConnector\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CpaymentConnector\ApiException;
use CpaymentConnector\Configuration;
use CpaymentConnector\HeaderSelector;
use CpaymentConnector\ObjectSerializer;

/**
 * StoredPaymentMethodsApi Class Doc Comment
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StoredPaymentMethodsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGet
     *
     * Gets the stored payment methods by customer reference.
     *
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $customer_ref The customer reference. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CpaymentConnector\Model\StoredPaymentMethodResponse
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGet($merchant_id, $merchant_site_id, $customer_ref, $auth_token)
    {
        list($response) = $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetWithHttpInfo($merchant_id, $merchant_site_id, $customer_ref, $auth_token);
        return $response;
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetWithHttpInfo
     *
     * Gets the stored payment methods by customer reference.
     *
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $customer_ref The customer reference. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CpaymentConnector\Model\StoredPaymentMethodResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetWithHttpInfo($merchant_id, $merchant_site_id, $customer_ref, $auth_token)
    {
        $request = $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetRequest($merchant_id, $merchant_site_id, $customer_ref, $auth_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CpaymentConnector\Model\StoredPaymentMethodResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CpaymentConnector\Model\StoredPaymentMethodResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CpaymentConnector\Model\StoredPaymentMethodResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CpaymentConnector\Model\StoredPaymentMethodResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetAsync
     *
     * Gets the stored payment methods by customer reference.
     *
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $customer_ref The customer reference. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetAsync($merchant_id, $merchant_site_id, $customer_ref, $auth_token)
    {
        return $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetAsyncWithHttpInfo($merchant_id, $merchant_site_id, $customer_ref, $auth_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetAsyncWithHttpInfo
     *
     * Gets the stored payment methods by customer reference.
     *
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $customer_ref The customer reference. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetAsyncWithHttpInfo($merchant_id, $merchant_site_id, $customer_ref, $auth_token)
    {
        $returnType = '\CpaymentConnector\Model\StoredPaymentMethodResponse';
        $request = $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetRequest($merchant_id, $merchant_site_id, $customer_ref, $auth_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGet'
     *
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $customer_ref The customer reference. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGetRequest($merchant_id, $merchant_site_id, $customer_ref, $auth_token)
    {
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGet'
            );
        }
        // verify the required parameter 'merchant_site_id' is set
        if ($merchant_site_id === null || (is_array($merchant_site_id) && count($merchant_site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_site_id when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGet'
            );
        }
        // verify the required parameter 'customer_ref' is set
        if ($customer_ref === null || (is_array($customer_ref) && count($customer_ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ref when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGet'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGet'
            );
        }

        $resourcePath = '/v1/stored-payment-methods/merchants/{merchantId}/sites/{merchantSiteId}/customerRef/{customerRef}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($auth_token !== null) {
            $headerParams['authToken'] = ObjectSerializer::toHeaderValue($auth_token);
        }

        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantSiteId' . '}',
                ObjectSerializer::toPathValue($merchant_site_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_ref !== null) {
            $resourcePath = str_replace(
                '{' . 'customerRef' . '}',
                ObjectSerializer::toPathValue($customer_ref),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDelete
     *
     * Deletes the specified stored payment method.
     *
     * @param  int $merchant_id The merchant identifier (required)
     * @param  string $merchant_site_id The merchant site identifier (required)
     * @param  string $stored_payment_method_id The stored payment method identifier (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDelete($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
    {
        list($response) = $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteWithHttpInfo($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token);
        return $response;
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteWithHttpInfo
     *
     * Deletes the specified stored payment method.
     *
     * @param  int $merchant_id The merchant identifier (required)
     * @param  string $merchant_site_id The merchant site identifier (required)
     * @param  string $stored_payment_method_id The stored payment method identifier (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteWithHttpInfo($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
    {
        $request = $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteRequest($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteAsync
     *
     * Deletes the specified stored payment method.
     *
     * @param  int $merchant_id The merchant identifier (required)
     * @param  string $merchant_site_id The merchant site identifier (required)
     * @param  string $stored_payment_method_id The stored payment method identifier (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteAsync($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
    {
        return $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteAsyncWithHttpInfo($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteAsyncWithHttpInfo
     *
     * Deletes the specified stored payment method.
     *
     * @param  int $merchant_id The merchant identifier (required)
     * @param  string $merchant_site_id The merchant site identifier (required)
     * @param  string $stored_payment_method_id The stored payment method identifier (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteAsyncWithHttpInfo($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
    {
        $returnType = 'string';
        $request = $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteRequest($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDelete'
     *
     * @param  int $merchant_id The merchant identifier (required)
     * @param  string $merchant_site_id The merchant site identifier (required)
     * @param  string $stored_payment_method_id The stored payment method identifier (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDeleteRequest($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
    {
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDelete'
            );
        }
        // verify the required parameter 'merchant_site_id' is set
        if ($merchant_site_id === null || (is_array($merchant_site_id) && count($merchant_site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_site_id when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDelete'
            );
        }
        // verify the required parameter 'stored_payment_method_id' is set
        if ($stored_payment_method_id === null || (is_array($stored_payment_method_id) && count($stored_payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stored_payment_method_id when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDelete'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDelete'
            );
        }

        $resourcePath = '/v1/stored-payment-methods/merchants/{merchantId}/sites/{merchantSiteId}/storedPaymentMethodId/{storedPaymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($auth_token !== null) {
            $headerParams['authToken'] = ObjectSerializer::toHeaderValue($auth_token);
        }

        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantSiteId' . '}',
                ObjectSerializer::toPathValue($merchant_site_id),
                $resourcePath
            );
        }
        // path params
        if ($stored_payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storedPaymentMethodId' . '}',
                ObjectSerializer::toPathValue($stored_payment_method_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGet
     *
     * Gets the stored payment method by identifier.
     *
     * @param  int $merchant_id merchant_id (required)
     * @param  string $merchant_site_id merchant_site_id (required)
     * @param  string $stored_payment_method_id The stored payment method identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CpaymentConnector\Model\StoredPaymentMethodResponse
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGet($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
    {
        list($response) = $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetWithHttpInfo($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token);
        return $response;
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetWithHttpInfo
     *
     * Gets the stored payment method by identifier.
     *
     * @param  int $merchant_id (required)
     * @param  string $merchant_site_id (required)
     * @param  string $stored_payment_method_id The stored payment method identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CpaymentConnector\Model\StoredPaymentMethodResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetWithHttpInfo($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
    {
        $request = $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetRequest($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CpaymentConnector\Model\StoredPaymentMethodResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CpaymentConnector\Model\StoredPaymentMethodResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CpaymentConnector\Model\StoredPaymentMethodResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CpaymentConnector\Model\StoredPaymentMethodResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetAsync
     *
     * Gets the stored payment method by identifier.
     *
     * @param  int $merchant_id (required)
     * @param  string $merchant_site_id (required)
     * @param  string $stored_payment_method_id The stored payment method identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetAsync($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
    {
        return $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetAsyncWithHttpInfo($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetAsyncWithHttpInfo
     *
     * Gets the stored payment method by identifier.
     *
     * @param  int $merchant_id (required)
     * @param  string $merchant_site_id (required)
     * @param  string $stored_payment_method_id The stored payment method identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetAsyncWithHttpInfo($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
    {
        $returnType = '\CpaymentConnector\Model\StoredPaymentMethodResponse';
        $request = $this->v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetRequest($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGet'
     *
     * @param  int $merchant_id (required)
     * @param  string $merchant_site_id (required)
     * @param  string $stored_payment_method_id The stored payment method identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGetRequest($merchant_id, $merchant_site_id, $stored_payment_method_id, $auth_token)
    {
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGet'
            );
        }
        // verify the required parameter 'merchant_site_id' is set
        if ($merchant_site_id === null || (is_array($merchant_site_id) && count($merchant_site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_site_id when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGet'
            );
        }
        // verify the required parameter 'stored_payment_method_id' is set
        if ($stored_payment_method_id === null || (is_array($stored_payment_method_id) && count($stored_payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stored_payment_method_id when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGet'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling v1StoredPaymentMethodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGet'
            );
        }

        $resourcePath = '/v1/stored-payment-methods/merchants/{merchantId}/sites/{merchantSiteId}/storedPaymentMethodId/{storedPaymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($auth_token !== null) {
            $headerParams['authToken'] = ObjectSerializer::toHeaderValue($auth_token);
        }

        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantSiteId' . '}',
                ObjectSerializer::toPathValue($merchant_site_id),
                $resourcePath
            );
        }
        // path params
        if ($stored_payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storedPaymentMethodId' . '}',
                ObjectSerializer::toPathValue($stored_payment_method_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1StoredPaymentMethodsPost
     *
     * Creates the specified stored payment method.
     *
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\StoredPaymentMethodRequest $stored_payment_method_request The stored payment method (optional)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function v1StoredPaymentMethodsPost($auth_token, $stored_payment_method_request = null)
    {
        list($response) = $this->v1StoredPaymentMethodsPostWithHttpInfo($auth_token, $stored_payment_method_request);
        return $response;
    }

    /**
     * Operation v1StoredPaymentMethodsPostWithHttpInfo
     *
     * Creates the specified stored payment method.
     *
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\StoredPaymentMethodRequest $stored_payment_method_request The stored payment method (optional)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1StoredPaymentMethodsPostWithHttpInfo($auth_token, $stored_payment_method_request = null)
    {
        $request = $this->v1StoredPaymentMethodsPostRequest($auth_token, $stored_payment_method_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1StoredPaymentMethodsPostAsync
     *
     * Creates the specified stored payment method.
     *
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\StoredPaymentMethodRequest $stored_payment_method_request The stored payment method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StoredPaymentMethodsPostAsync($auth_token, $stored_payment_method_request = null)
    {
        return $this->v1StoredPaymentMethodsPostAsyncWithHttpInfo($auth_token, $stored_payment_method_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1StoredPaymentMethodsPostAsyncWithHttpInfo
     *
     * Creates the specified stored payment method.
     *
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\StoredPaymentMethodRequest $stored_payment_method_request The stored payment method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StoredPaymentMethodsPostAsyncWithHttpInfo($auth_token, $stored_payment_method_request = null)
    {
        $returnType = 'string';
        $request = $this->v1StoredPaymentMethodsPostRequest($auth_token, $stored_payment_method_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1StoredPaymentMethodsPost'
     *
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\StoredPaymentMethodRequest $stored_payment_method_request The stored payment method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1StoredPaymentMethodsPostRequest($auth_token, $stored_payment_method_request = null)
    {
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling v1StoredPaymentMethodsPost'
            );
        }

        $resourcePath = '/v1/stored-payment-methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($auth_token !== null) {
            $headerParams['authToken'] = ObjectSerializer::toHeaderValue($auth_token);
        }


        // body params
        $_tempBody = null;
        if (isset($stored_payment_method_request)) {
            $_tempBody = $stored_payment_method_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
