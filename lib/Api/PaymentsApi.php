<?php
/**
 * PaymentsApi
 * PHP version 5
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CpaymentConnector\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CpaymentConnector\ApiException;
use CpaymentConnector\Configuration;
use CpaymentConnector\HeaderSelector;
use CpaymentConnector\ObjectSerializer;

/**
 * PaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet
     *
     * Gets ALL the details for a specified OrderRef.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CpaymentConnector\Model\PaymentOperationsResponse
     */
    public function v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet($order_ref, $merchant_id, $merchant_site_id, $auth_token)
    {
        list($response) = $this->v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $auth_token);
        return $response;
    }

    /**
     * Operation v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo
     *
     * Gets ALL the details for a specified OrderRef.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CpaymentConnector\Model\PaymentOperationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $auth_token)
    {
        $request = $this->v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetRequest($order_ref, $merchant_id, $merchant_site_id, $auth_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CpaymentConnector\Model\PaymentOperationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CpaymentConnector\Model\PaymentOperationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CpaymentConnector\Model\PaymentOperationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsync
     *
     * Gets ALL the details for a specified OrderRef.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsync($order_ref, $merchant_id, $merchant_site_id, $auth_token)
    {
        return $this->v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $auth_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo
     *
     * Gets ALL the details for a specified OrderRef.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $auth_token)
    {
        $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
        $request = $this->v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetRequest($order_ref, $merchant_id, $merchant_site_id, $auth_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet'
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetRequest($order_ref, $merchant_id, $merchant_site_id, $auth_token)
    {
        // verify the required parameter 'order_ref' is set
        if ($order_ref === null || (is_array($order_ref) && count($order_ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_ref when calling v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet'
            );
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet'
            );
        }
        // verify the required parameter 'merchant_site_id' is set
        if ($merchant_site_id === null || (is_array($merchant_site_id) && count($merchant_site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_site_id when calling v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet'
            );
        }

        $resourcePath = '/v1/payments/all/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($auth_token !== null) {
            $headerParams['authToken'] = ObjectSerializer::toHeaderValue($auth_token);
        }

        // path params
        if ($order_ref !== null) {
            $resourcePath = str_replace(
                '{' . 'orderRef' . '}',
                ObjectSerializer::toPathValue($order_ref),
                $resourcePath
            );
        }
        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantSiteId' . '}',
                ObjectSerializer::toPathValue($merchant_site_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet
     *
     * Gets the details for a specified couple of OrderRef/OrderTag.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $order_tag The order Tag (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CpaymentConnector\Model\PaymentOperationsResponse
     */
    public function v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet($order_ref, $merchant_id, $merchant_site_id, $order_tag, $auth_token)
    {
        list($response) = $this->v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $order_tag, $auth_token);
        return $response;
    }

    /**
     * Operation v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetWithHttpInfo
     *
     * Gets the details for a specified couple of OrderRef/OrderTag.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $order_tag The order Tag (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CpaymentConnector\Model\PaymentOperationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $order_tag, $auth_token)
    {
        $request = $this->v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetRequest($order_ref, $merchant_id, $merchant_site_id, $order_tag, $auth_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CpaymentConnector\Model\PaymentOperationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CpaymentConnector\Model\PaymentOperationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CpaymentConnector\Model\PaymentOperationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetAsync
     *
     * Gets the details for a specified couple of OrderRef/OrderTag.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $order_tag The order Tag (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetAsync($order_ref, $merchant_id, $merchant_site_id, $order_tag, $auth_token)
    {
        return $this->v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetAsyncWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $order_tag, $auth_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetAsyncWithHttpInfo
     *
     * Gets the details for a specified couple of OrderRef/OrderTag.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $order_tag The order Tag (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetAsyncWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $order_tag, $auth_token)
    {
        $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
        $request = $this->v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetRequest($order_ref, $merchant_id, $merchant_site_id, $order_tag, $auth_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet'
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $order_tag The order Tag (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetRequest($order_ref, $merchant_id, $merchant_site_id, $order_tag, $auth_token)
    {
        // verify the required parameter 'order_ref' is set
        if ($order_ref === null || (is_array($order_ref) && count($order_ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_ref when calling v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet'
            );
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet'
            );
        }
        // verify the required parameter 'merchant_site_id' is set
        if ($merchant_site_id === null || (is_array($merchant_site_id) && count($merchant_site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_site_id when calling v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet'
            );
        }
        // verify the required parameter 'order_tag' is set
        if ($order_tag === null || (is_array($order_tag) && count($order_tag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_tag when calling v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet'
            );
        }

        $resourcePath = '/v1/payments/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}/{orderTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($auth_token !== null) {
            $headerParams['authToken'] = ObjectSerializer::toHeaderValue($auth_token);
        }

        // path params
        if ($order_ref !== null) {
            $resourcePath = str_replace(
                '{' . 'orderRef' . '}',
                ObjectSerializer::toPathValue($order_ref),
                $resourcePath
            );
        }
        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantSiteId' . '}',
                ObjectSerializer::toPathValue($merchant_site_id),
                $resourcePath
            );
        }
        // path params
        if ($order_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'orderTag' . '}',
                ObjectSerializer::toPathValue($order_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet
     *
     * Gets the details for a specified OrderRef.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CpaymentConnector\Model\PaymentOperationsResponse
     */
    public function v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet($order_ref, $merchant_id, $merchant_site_id, $auth_token)
    {
        list($response) = $this->v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $auth_token);
        return $response;
    }

    /**
     * Operation v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo
     *
     * Gets the details for a specified OrderRef.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CpaymentConnector\Model\PaymentOperationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $auth_token)
    {
        $request = $this->v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetRequest($order_ref, $merchant_id, $merchant_site_id, $auth_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CpaymentConnector\Model\PaymentOperationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CpaymentConnector\Model\PaymentOperationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CpaymentConnector\Model\PaymentOperationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsync
     *
     * Gets the details for a specified OrderRef.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsync($order_ref, $merchant_id, $merchant_site_id, $auth_token)
    {
        return $this->v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $auth_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo
     *
     * Gets the details for a specified OrderRef.
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo($order_ref, $merchant_id, $merchant_site_id, $auth_token)
    {
        $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
        $request = $this->v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetRequest($order_ref, $merchant_id, $merchant_site_id, $auth_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet'
     *
     * @param  string $order_ref The order reference. (required)
     * @param  int $merchant_id The merchant identifier. (required)
     * @param  string $merchant_site_id The merchant site identifier. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetRequest($order_ref, $merchant_id, $merchant_site_id, $auth_token)
    {
        // verify the required parameter 'order_ref' is set
        if ($order_ref === null || (is_array($order_ref) && count($order_ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_ref when calling v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet'
            );
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet'
            );
        }
        // verify the required parameter 'merchant_site_id' is set
        if ($merchant_site_id === null || (is_array($merchant_site_id) && count($merchant_site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_site_id when calling v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet'
            );
        }

        $resourcePath = '/v1/payments/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($auth_token !== null) {
            $headerParams['authToken'] = ObjectSerializer::toHeaderValue($auth_token);
        }

        // path params
        if ($order_ref !== null) {
            $resourcePath = str_replace(
                '{' . 'orderRef' . '}',
                ObjectSerializer::toPathValue($order_ref),
                $resourcePath
            );
        }
        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }
        // path params
        if ($merchant_site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantSiteId' . '}',
                ObjectSerializer::toPathValue($merchant_site_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsCancelOrRefundPut
     *
     * Executes a cancel or refund operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CpaymentConnector\Model\PaymentOperationsResponse
     */
    public function v1PaymentsByOrderRefOperationsCancelOrRefundPut($order_ref, $auth_token, $payment_operation_request = null)
    {
        list($response) = $this->v1PaymentsByOrderRefOperationsCancelOrRefundPutWithHttpInfo($order_ref, $auth_token, $payment_operation_request);
        return $response;
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsCancelOrRefundPutWithHttpInfo
     *
     * Executes a cancel or refund operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CpaymentConnector\Model\PaymentOperationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PaymentsByOrderRefOperationsCancelOrRefundPutWithHttpInfo($order_ref, $auth_token, $payment_operation_request = null)
    {
        $request = $this->v1PaymentsByOrderRefOperationsCancelOrRefundPutRequest($order_ref, $auth_token, $payment_operation_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CpaymentConnector\Model\PaymentOperationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CpaymentConnector\Model\PaymentOperationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CpaymentConnector\Model\PaymentOperationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsCancelOrRefundPutAsync
     *
     * Executes a cancel or refund operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsByOrderRefOperationsCancelOrRefundPutAsync($order_ref, $auth_token, $payment_operation_request = null)
    {
        return $this->v1PaymentsByOrderRefOperationsCancelOrRefundPutAsyncWithHttpInfo($order_ref, $auth_token, $payment_operation_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsCancelOrRefundPutAsyncWithHttpInfo
     *
     * Executes a cancel or refund operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsByOrderRefOperationsCancelOrRefundPutAsyncWithHttpInfo($order_ref, $auth_token, $payment_operation_request = null)
    {
        $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
        $request = $this->v1PaymentsByOrderRefOperationsCancelOrRefundPutRequest($order_ref, $auth_token, $payment_operation_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PaymentsByOrderRefOperationsCancelOrRefundPut'
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PaymentsByOrderRefOperationsCancelOrRefundPutRequest($order_ref, $auth_token, $payment_operation_request = null)
    {
        // verify the required parameter 'order_ref' is set
        if ($order_ref === null || (is_array($order_ref) && count($order_ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_ref when calling v1PaymentsByOrderRefOperationsCancelOrRefundPut'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling v1PaymentsByOrderRefOperationsCancelOrRefundPut'
            );
        }

        $resourcePath = '/v1/payments/{orderRef}/operations/cancelOrRefund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($auth_token !== null) {
            $headerParams['authToken'] = ObjectSerializer::toHeaderValue($auth_token);
        }

        // path params
        if ($order_ref !== null) {
            $resourcePath = str_replace(
                '{' . 'orderRef' . '}',
                ObjectSerializer::toPathValue($order_ref),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment_operation_request)) {
            $_tempBody = $payment_operation_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsCapturePut
     *
     * Executes a capture operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CpaymentConnector\Model\PaymentOperationsResponse
     */
    public function v1PaymentsByOrderRefOperationsCapturePut($order_ref, $auth_token, $payment_operation_request = null)
    {
        list($response) = $this->v1PaymentsByOrderRefOperationsCapturePutWithHttpInfo($order_ref, $auth_token, $payment_operation_request);
        return $response;
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsCapturePutWithHttpInfo
     *
     * Executes a capture operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CpaymentConnector\Model\PaymentOperationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PaymentsByOrderRefOperationsCapturePutWithHttpInfo($order_ref, $auth_token, $payment_operation_request = null)
    {
        $request = $this->v1PaymentsByOrderRefOperationsCapturePutRequest($order_ref, $auth_token, $payment_operation_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CpaymentConnector\Model\PaymentOperationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CpaymentConnector\Model\PaymentOperationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CpaymentConnector\Model\PaymentOperationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsCapturePutAsync
     *
     * Executes a capture operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsByOrderRefOperationsCapturePutAsync($order_ref, $auth_token, $payment_operation_request = null)
    {
        return $this->v1PaymentsByOrderRefOperationsCapturePutAsyncWithHttpInfo($order_ref, $auth_token, $payment_operation_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsCapturePutAsyncWithHttpInfo
     *
     * Executes a capture operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsByOrderRefOperationsCapturePutAsyncWithHttpInfo($order_ref, $auth_token, $payment_operation_request = null)
    {
        $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
        $request = $this->v1PaymentsByOrderRefOperationsCapturePutRequest($order_ref, $auth_token, $payment_operation_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PaymentsByOrderRefOperationsCapturePut'
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PaymentsByOrderRefOperationsCapturePutRequest($order_ref, $auth_token, $payment_operation_request = null)
    {
        // verify the required parameter 'order_ref' is set
        if ($order_ref === null || (is_array($order_ref) && count($order_ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_ref when calling v1PaymentsByOrderRefOperationsCapturePut'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling v1PaymentsByOrderRefOperationsCapturePut'
            );
        }

        $resourcePath = '/v1/payments/{orderRef}/operations/capture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($auth_token !== null) {
            $headerParams['authToken'] = ObjectSerializer::toHeaderValue($auth_token);
        }

        // path params
        if ($order_ref !== null) {
            $resourcePath = str_replace(
                '{' . 'orderRef' . '}',
                ObjectSerializer::toPathValue($order_ref),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment_operation_request)) {
            $_tempBody = $payment_operation_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsRecomputePut
     *
     * Executes a recompute operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CpaymentConnector\Model\PaymentOperationsResponse
     */
    public function v1PaymentsByOrderRefOperationsRecomputePut($order_ref, $auth_token, $payment_operation_request = null)
    {
        list($response) = $this->v1PaymentsByOrderRefOperationsRecomputePutWithHttpInfo($order_ref, $auth_token, $payment_operation_request);
        return $response;
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsRecomputePutWithHttpInfo
     *
     * Executes a recompute operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \CpaymentConnector\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CpaymentConnector\Model\PaymentOperationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1PaymentsByOrderRefOperationsRecomputePutWithHttpInfo($order_ref, $auth_token, $payment_operation_request = null)
    {
        $request = $this->v1PaymentsByOrderRefOperationsRecomputePutRequest($order_ref, $auth_token, $payment_operation_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CpaymentConnector\Model\PaymentOperationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CpaymentConnector\Model\PaymentOperationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CpaymentConnector\Model\PaymentOperationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsRecomputePutAsync
     *
     * Executes a recompute operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsByOrderRefOperationsRecomputePutAsync($order_ref, $auth_token, $payment_operation_request = null)
    {
        return $this->v1PaymentsByOrderRefOperationsRecomputePutAsyncWithHttpInfo($order_ref, $auth_token, $payment_operation_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1PaymentsByOrderRefOperationsRecomputePutAsyncWithHttpInfo
     *
     * Executes a recompute operation on the specified OrderRef.
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1PaymentsByOrderRefOperationsRecomputePutAsyncWithHttpInfo($order_ref, $auth_token, $payment_operation_request = null)
    {
        $returnType = '\CpaymentConnector\Model\PaymentOperationsResponse';
        $request = $this->v1PaymentsByOrderRefOperationsRecomputePutRequest($order_ref, $auth_token, $payment_operation_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1PaymentsByOrderRefOperationsRecomputePut'
     *
     * @param  string $order_ref The OrderRef. (required)
     * @param  string $auth_token Gets or sets the authentication token. (required)
     * @param  \CpaymentConnector\Model\PaymentOperationsRequest $payment_operation_request The payment operation request. Materialized by the Body of the PUT request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1PaymentsByOrderRefOperationsRecomputePutRequest($order_ref, $auth_token, $payment_operation_request = null)
    {
        // verify the required parameter 'order_ref' is set
        if ($order_ref === null || (is_array($order_ref) && count($order_ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_ref when calling v1PaymentsByOrderRefOperationsRecomputePut'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling v1PaymentsByOrderRefOperationsRecomputePut'
            );
        }

        $resourcePath = '/v1/payments/{orderRef}/operations/recompute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($auth_token !== null) {
            $headerParams['authToken'] = ObjectSerializer::toHeaderValue($auth_token);
        }

        // path params
        if ($order_ref !== null) {
            $resourcePath = str_replace(
                '{' . 'orderRef' . '}',
                ObjectSerializer::toPathValue($order_ref),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($payment_operation_request)) {
            $_tempBody = $payment_operation_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
