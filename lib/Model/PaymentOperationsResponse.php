<?php
/**
 * PaymentOperationsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CpaymentConnector\Model;

use \ArrayAccess;
use \CpaymentConnector\ObjectSerializer;

/**
 * PaymentOperationsResponse Class Doc Comment
 *
 * @category Class
 * @description All payment operation data for the response
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentOperationsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentOperationsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_tag' => 'string',
        'schedules' => '\CpaymentConnector\Model\Schedule[]',
        'order_ref' => 'string',
        'response_code' => 'string',
        'action_type' => 'string',
        'response_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'order_tag' => null,
        'schedules' => null,
        'order_ref' => null,
        'response_code' => null,
        'action_type' => null,
        'response_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_tag' => 'orderTag',
        'schedules' => 'schedules',
        'order_ref' => 'orderRef',
        'response_code' => 'responseCode',
        'action_type' => 'actionType',
        'response_message' => 'responseMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_tag' => 'setOrderTag',
        'schedules' => 'setSchedules',
        'order_ref' => 'setOrderRef',
        'response_code' => 'setResponseCode',
        'action_type' => 'setActionType',
        'response_message' => 'setResponseMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_tag' => 'getOrderTag',
        'schedules' => 'getSchedules',
        'order_ref' => 'getOrderRef',
        'response_code' => 'getResponseCode',
        'action_type' => 'getActionType',
        'response_message' => 'getResponseMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RESPONSE_CODE_UNDETERMINED = 'undetermined';
    const RESPONSE_CODE_SUCCESS = 'success';
    const RESPONSE_CODE_REFUSED = 'refused';
    const RESPONSE_CODE_REFUSED_BY_BANK = 'refusedByBank';
    const RESPONSE_CODE_INTERNAL_FAILURE = 'internalFailure';
    const RESPONSE_CODE_PENDING = 'pending';
    const RESPONSE_CODE_UNAVAILABLE = 'unavailable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseCodeAllowableValues()
    {
        return [
            self::RESPONSE_CODE_UNDETERMINED,
            self::RESPONSE_CODE_SUCCESS,
            self::RESPONSE_CODE_REFUSED,
            self::RESPONSE_CODE_REFUSED_BY_BANK,
            self::RESPONSE_CODE_INTERNAL_FAILURE,
            self::RESPONSE_CODE_PENDING,
            self::RESPONSE_CODE_UNAVAILABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_tag'] = isset($data['order_tag']) ? $data['order_tag'] : null;
        $this->container['schedules'] = isset($data['schedules']) ? $data['schedules'] : null;
        $this->container['order_ref'] = isset($data['order_ref']) ? $data['order_ref'] : null;
        $this->container['response_code'] = isset($data['response_code']) ? $data['response_code'] : null;
        $this->container['action_type'] = isset($data['action_type']) ? $data['action_type'] : null;
        $this->container['response_message'] = isset($data['response_message']) ? $data['response_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResponseCodeAllowableValues();
        if (!is_null($this->container['response_code']) && !in_array($this->container['response_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'response_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_tag
     *
     * @return string|null
     */
    public function getOrderTag()
    {
        return $this->container['order_tag'];
    }

    /**
     * Sets order_tag
     *
     * @param string|null $order_tag The orderTag
     *
     * @return $this
     */
    public function setOrderTag($order_tag)
    {
        $this->container['order_tag'] = $order_tag;

        return $this;
    }

    /**
     * Gets schedules
     *
     * @return \CpaymentConnector\Model\Schedule[]|null
     */
    public function getSchedules()
    {
        return $this->container['schedules'];
    }

    /**
     * Sets schedules
     *
     * @param \CpaymentConnector\Model\Schedule[]|null $schedules All schedules data
     *
     * @return $this
     */
    public function setSchedules($schedules)
    {
        $this->container['schedules'] = $schedules;

        return $this;
    }

    /**
     * Gets order_ref
     *
     * @return string|null
     */
    public function getOrderRef()
    {
        return $this->container['order_ref'];
    }

    /**
     * Sets order_ref
     *
     * @param string|null $order_ref The orderRef
     *
     * @return $this
     */
    public function setOrderRef($order_ref)
    {
        $this->container['order_ref'] = $order_ref;

        return $this;
    }

    /**
     * Gets response_code
     *
     * @return string|null
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param string|null $response_code The response code of the service
     *
     * @return $this
     */
    public function setResponseCode($response_code)
    {
        $allowedValues = $this->getResponseCodeAllowableValues();
        if (!is_null($response_code) && !in_array($response_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'response_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets action_type
     *
     * @return string|null
     */
    public function getActionType()
    {
        return $this->container['action_type'];
    }

    /**
     * Sets action_type
     *
     * @param string|null $action_type The action type
     *
     * @return $this
     */
    public function setActionType($action_type)
    {
        $this->container['action_type'] = $action_type;

        return $this;
    }

    /**
     * Gets response_message
     *
     * @return string|null
     */
    public function getResponseMessage()
    {
        return $this->container['response_message'];
    }

    /**
     * Sets response_message
     *
     * @param string|null $response_message The response code of the service
     *
     * @return $this
     */
    public function setResponseMessage($response_message)
    {
        $this->container['response_message'] = $response_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


