<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CpaymentConnector\Model;

use \ArrayAccess;
use \CpaymentConnector\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @description Customer
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billing_address' => '\CpaymentConnector\Model\ShippingAddress',
        'birth_date' => '\DateTime',
        'civility' => 'string',
        'country' => 'string',
        'customer_ip' => 'string',
        'customer_ref' => 'string',
        'delivery_address' => '\CpaymentConnector\Model\ShippingAddress',
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'mobile_phone' => 'string',
        'phone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'billing_address' => null,
        'birth_date' => 'date-time',
        'civility' => null,
        'country' => null,
        'customer_ip' => null,
        'customer_ref' => null,
        'delivery_address' => null,
        'email' => null,
        'first_name' => null,
        'last_name' => null,
        'mobile_phone' => null,
        'phone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_address' => 'billingAddress',
        'birth_date' => 'birthDate',
        'civility' => 'civility',
        'country' => 'country',
        'customer_ip' => 'customerIp',
        'customer_ref' => 'customerRef',
        'delivery_address' => 'deliveryAddress',
        'email' => 'email',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'mobile_phone' => 'mobilePhone',
        'phone' => 'phone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_address' => 'setBillingAddress',
        'birth_date' => 'setBirthDate',
        'civility' => 'setCivility',
        'country' => 'setCountry',
        'customer_ip' => 'setCustomerIp',
        'customer_ref' => 'setCustomerRef',
        'delivery_address' => 'setDeliveryAddress',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'mobile_phone' => 'setMobilePhone',
        'phone' => 'setPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_address' => 'getBillingAddress',
        'birth_date' => 'getBirthDate',
        'civility' => 'getCivility',
        'country' => 'getCountry',
        'customer_ip' => 'getCustomerIp',
        'customer_ref' => 'getCustomerRef',
        'delivery_address' => 'getDeliveryAddress',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'mobile_phone' => 'getMobilePhone',
        'phone' => 'getPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CIVILITY_UNKNOWN = 'unknown';
    const CIVILITY_MISTER = 'mister';
    const CIVILITY_MISSES = 'misses';
    const CIVILITY_MISS = 'miss';
    const COUNTRY_UNKNOWN = 'unknown';
    const COUNTRY_AW = 'aw';
    const COUNTRY_AF = 'af';
    const COUNTRY_AO = 'ao';
    const COUNTRY_AI = 'ai';
    const COUNTRY_AL = 'al';
    const COUNTRY_AD = 'ad';
    const COUNTRY_AN = 'an';
    const COUNTRY_AE = 'ae';
    const COUNTRY_AR = 'ar';
    const COUNTRY_AM = 'am';
    const COUNTRY__AS = 'as';
    const COUNTRY_AQ = 'aq';
    const COUNTRY_TF = 'tf';
    const COUNTRY_AG = 'ag';
    const COUNTRY_AU = 'au';
    const COUNTRY_AT = 'at';
    const COUNTRY_AZ = 'az';
    const COUNTRY_BI = 'bi';
    const COUNTRY_BE = 'be';
    const COUNTRY_BJ = 'bj';
    const COUNTRY_BF = 'bf';
    const COUNTRY_BD = 'bd';
    const COUNTRY_BG = 'bg';
    const COUNTRY_BH = 'bh';
    const COUNTRY_BS = 'bs';
    const COUNTRY_BA = 'ba';
    const COUNTRY_BY = 'by';
    const COUNTRY_BZ = 'bz';
    const COUNTRY_BM = 'bm';
    const COUNTRY_BO = 'bo';
    const COUNTRY_BR = 'br';
    const COUNTRY_BB = 'bb';
    const COUNTRY_BN = 'bn';
    const COUNTRY_BT = 'bt';
    const COUNTRY_BV = 'bv';
    const COUNTRY_BW = 'bw';
    const COUNTRY_CF = 'cf';
    const COUNTRY_CA = 'ca';
    const COUNTRY_CC = 'cc';
    const COUNTRY_CH = 'ch';
    const COUNTRY_CL = 'cl';
    const COUNTRY_CN = 'cn';
    const COUNTRY_CI = 'ci';
    const COUNTRY_CM = 'cm';
    const COUNTRY_CG = 'cg';
    const COUNTRY_CK = 'ck';
    const COUNTRY_CO = 'co';
    const COUNTRY_KM = 'km';
    const COUNTRY_CV = 'cv';
    const COUNTRY_CR = 'cr';
    const COUNTRY_CU = 'cu';
    const COUNTRY_CX = 'cx';
    const COUNTRY_KY = 'ky';
    const COUNTRY_CY = 'cy';
    const COUNTRY_CZ = 'cz';
    const COUNTRY_DE = 'de';
    const COUNTRY_DJ = 'dj';
    const COUNTRY_DM = 'dm';
    const COUNTRY_DK = 'dk';
    const COUNTRY__DO = 'do';
    const COUNTRY_DZ = 'dz';
    const COUNTRY_EC = 'ec';
    const COUNTRY_EG = 'eg';
    const COUNTRY_ER = 'er';
    const COUNTRY_EH = 'eh';
    const COUNTRY_ES = 'es';
    const COUNTRY_EE = 'ee';
    const COUNTRY_ET = 'et';
    const COUNTRY_FI = 'fi';
    const COUNTRY_FJ = 'fj';
    const COUNTRY_FK = 'fk';
    const COUNTRY_FR = 'fr';
    const COUNTRY_FO = 'fo';
    const COUNTRY_FM = 'fm';
    const COUNTRY_GA = 'ga';
    const COUNTRY_GB = 'gb';
    const COUNTRY_GE = 'ge';
    const COUNTRY_GH = 'gh';
    const COUNTRY_GI = 'gi';
    const COUNTRY_GN = 'gn';
    const COUNTRY_GP = 'gp';
    const COUNTRY_GM = 'gm';
    const COUNTRY_GW = 'gw';
    const COUNTRY_GQ = 'gq';
    const COUNTRY_GR = 'gr';
    const COUNTRY_GD = 'gd';
    const COUNTRY_GL = 'gl';
    const COUNTRY_GT = 'gt';
    const COUNTRY_GF = 'gf';
    const COUNTRY_GU = 'gu';
    const COUNTRY_GY = 'gy';
    const COUNTRY_HK = 'hk';
    const COUNTRY_HM = 'hm';
    const COUNTRY_HN = 'hn';
    const COUNTRY_HR = 'hr';
    const COUNTRY_HT = 'ht';
    const COUNTRY_HU = 'hu';
    const COUNTRY_ID = 'id';
    const COUNTRY_IN = 'in';
    const COUNTRY_IO = 'io';
    const COUNTRY_IE = 'ie';
    const COUNTRY_IR = 'ir';
    const COUNTRY_IQ = 'iq';
    const COUNTRY_IS = 'is';
    const COUNTRY_IL = 'il';
    const COUNTRY_IT = 'it';
    const COUNTRY_JM = 'jm';
    const COUNTRY_JO = 'jo';
    const COUNTRY_JP = 'jp';
    const COUNTRY_KZ = 'kz';
    const COUNTRY_KE = 'ke';
    const COUNTRY_KG = 'kg';
    const COUNTRY_KH = 'kh';
    const COUNTRY_KI = 'ki';
    const COUNTRY_KN = 'kn';
    const COUNTRY_KR = 'kr';
    const COUNTRY_KW = 'kw';
    const COUNTRY_LA = 'la';
    const COUNTRY_LB = 'lb';
    const COUNTRY_LR = 'lr';
    const COUNTRY_LY = 'ly';
    const COUNTRY_LC = 'lc';
    const COUNTRY_LI = 'li';
    const COUNTRY_LK = 'lk';
    const COUNTRY_LS = 'ls';
    const COUNTRY_LT = 'lt';
    const COUNTRY_LU = 'lu';
    const COUNTRY_LV = 'lv';
    const COUNTRY_MO = 'mo';
    const COUNTRY_MA = 'ma';
    const COUNTRY_MC = 'mc';
    const COUNTRY_MD = 'md';
    const COUNTRY_MG = 'mg';
    const COUNTRY_MV = 'mv';
    const COUNTRY_MX = 'mx';
    const COUNTRY_MH = 'mh';
    const COUNTRY_MK = 'mk';
    const COUNTRY_ML = 'ml';
    const COUNTRY_MT = 'mt';
    const COUNTRY_MM = 'mm';
    const COUNTRY_MN = 'mn';
    const COUNTRY_MP = 'mp';
    const COUNTRY_MZ = 'mz';
    const COUNTRY_MR = 'mr';
    const COUNTRY_MS = 'ms';
    const COUNTRY_MQ = 'mq';
    const COUNTRY_MU = 'mu';
    const COUNTRY_MW = 'mw';
    const COUNTRY_MY = 'my';
    const COUNTRY_YT = 'yt';
    const COUNTRY_NA = 'na';
    const COUNTRY_NC = 'nc';
    const COUNTRY_NE = 'ne';
    const COUNTRY_NF = 'nf';
    const COUNTRY_NG = 'ng';
    const COUNTRY_NI = 'ni';
    const COUNTRY_NU = 'nu';
    const COUNTRY_NL = 'nl';
    const COUNTRY_NO = 'no';
    const COUNTRY_NP = 'np';
    const COUNTRY_NR = 'nr';
    const COUNTRY_NZ = 'nz';
    const COUNTRY_OM = 'om';
    const COUNTRY_PK = 'pk';
    const COUNTRY_PA = 'pa';
    const COUNTRY_PN = 'pn';
    const COUNTRY_PE = 'pe';
    const COUNTRY_PH = 'ph';
    const COUNTRY_PW = 'pw';
    const COUNTRY_PG = 'pg';
    const COUNTRY_PL = 'pl';
    const COUNTRY_PR = 'pr';
    const COUNTRY_KP = 'kp';
    const COUNTRY_PT = 'pt';
    const COUNTRY_PY = 'py';
    const COUNTRY_PF = 'pf';
    const COUNTRY_QA = 'qa';
    const COUNTRY_RE = 're';
    const COUNTRY_RO = 'ro';
    const COUNTRY_RU = 'ru';
    const COUNTRY_RW = 'rw';
    const COUNTRY_SA = 'sa';
    const COUNTRY_SD = 'sd';
    const COUNTRY_SN = 'sn';
    const COUNTRY_SG = 'sg';
    const COUNTRY_GS = 'gs';
    const COUNTRY_SH = 'sh';
    const COUNTRY_SJ = 'sj';
    const COUNTRY_SB = 'sb';
    const COUNTRY_SL = 'sl';
    const COUNTRY_SV = 'sv';
    const COUNTRY_SM = 'sm';
    const COUNTRY_SO = 'so';
    const COUNTRY_PM = 'pm';
    const COUNTRY_ST = 'st';
    const COUNTRY_SR = 'sr';
    const COUNTRY_SK = 'sk';
    const COUNTRY_SI = 'si';
    const COUNTRY_SE = 'se';
    const COUNTRY_SZ = 'sz';
    const COUNTRY_SC = 'sc';
    const COUNTRY_SY = 'sy';
    const COUNTRY_TC = 'tc';
    const COUNTRY_TD = 'td';
    const COUNTRY_TG = 'tg';
    const COUNTRY_TH = 'th';
    const COUNTRY_TJ = 'tj';
    const COUNTRY_TK = 'tk';
    const COUNTRY_TM = 'tm';
    const COUNTRY_TP = 'tp';
    const COUNTRY_TO = 'to';
    const COUNTRY_TT = 'tt';
    const COUNTRY_TN = 'tn';
    const COUNTRY_TR = 'tr';
    const COUNTRY_TV = 'tv';
    const COUNTRY_TW = 'tw';
    const COUNTRY_TZ = 'tz';
    const COUNTRY_UG = 'ug';
    const COUNTRY_UA = 'ua';
    const COUNTRY_UM = 'um';
    const COUNTRY_UY = 'uy';
    const COUNTRY_US = 'us';
    const COUNTRY_UZ = 'uz';
    const COUNTRY_VA = 'va';
    const COUNTRY_VC = 'vc';
    const COUNTRY_VE = 've';
    const COUNTRY_VG = 'vg';
    const COUNTRY_VI = 'vi';
    const COUNTRY_VN = 'vn';
    const COUNTRY_VU = 'vu';
    const COUNTRY_WF = 'wf';
    const COUNTRY_WS = 'ws';
    const COUNTRY_YE = 'ye';
    const COUNTRY_ZA = 'za';
    const COUNTRY_ZM = 'zm';
    const COUNTRY_ZW = 'zw';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCivilityAllowableValues()
    {
        return [
            self::CIVILITY_UNKNOWN,
            self::CIVILITY_MISTER,
            self::CIVILITY_MISSES,
            self::CIVILITY_MISS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryAllowableValues()
    {
        return [
            self::COUNTRY_UNKNOWN,
            self::COUNTRY_AW,
            self::COUNTRY_AF,
            self::COUNTRY_AO,
            self::COUNTRY_AI,
            self::COUNTRY_AL,
            self::COUNTRY_AD,
            self::COUNTRY_AN,
            self::COUNTRY_AE,
            self::COUNTRY_AR,
            self::COUNTRY_AM,
            self::COUNTRY__AS,
            self::COUNTRY_AQ,
            self::COUNTRY_TF,
            self::COUNTRY_AG,
            self::COUNTRY_AU,
            self::COUNTRY_AT,
            self::COUNTRY_AZ,
            self::COUNTRY_BI,
            self::COUNTRY_BE,
            self::COUNTRY_BJ,
            self::COUNTRY_BF,
            self::COUNTRY_BD,
            self::COUNTRY_BG,
            self::COUNTRY_BH,
            self::COUNTRY_BS,
            self::COUNTRY_BA,
            self::COUNTRY_BY,
            self::COUNTRY_BZ,
            self::COUNTRY_BM,
            self::COUNTRY_BO,
            self::COUNTRY_BR,
            self::COUNTRY_BB,
            self::COUNTRY_BN,
            self::COUNTRY_BT,
            self::COUNTRY_BV,
            self::COUNTRY_BW,
            self::COUNTRY_CF,
            self::COUNTRY_CA,
            self::COUNTRY_CC,
            self::COUNTRY_CH,
            self::COUNTRY_CL,
            self::COUNTRY_CN,
            self::COUNTRY_CI,
            self::COUNTRY_CM,
            self::COUNTRY_CG,
            self::COUNTRY_CK,
            self::COUNTRY_CO,
            self::COUNTRY_KM,
            self::COUNTRY_CV,
            self::COUNTRY_CR,
            self::COUNTRY_CU,
            self::COUNTRY_CX,
            self::COUNTRY_KY,
            self::COUNTRY_CY,
            self::COUNTRY_CZ,
            self::COUNTRY_DE,
            self::COUNTRY_DJ,
            self::COUNTRY_DM,
            self::COUNTRY_DK,
            self::COUNTRY__DO,
            self::COUNTRY_DZ,
            self::COUNTRY_EC,
            self::COUNTRY_EG,
            self::COUNTRY_ER,
            self::COUNTRY_EH,
            self::COUNTRY_ES,
            self::COUNTRY_EE,
            self::COUNTRY_ET,
            self::COUNTRY_FI,
            self::COUNTRY_FJ,
            self::COUNTRY_FK,
            self::COUNTRY_FR,
            self::COUNTRY_FO,
            self::COUNTRY_FM,
            self::COUNTRY_GA,
            self::COUNTRY_GB,
            self::COUNTRY_GE,
            self::COUNTRY_GH,
            self::COUNTRY_GI,
            self::COUNTRY_GN,
            self::COUNTRY_GP,
            self::COUNTRY_GM,
            self::COUNTRY_GW,
            self::COUNTRY_GQ,
            self::COUNTRY_GR,
            self::COUNTRY_GD,
            self::COUNTRY_GL,
            self::COUNTRY_GT,
            self::COUNTRY_GF,
            self::COUNTRY_GU,
            self::COUNTRY_GY,
            self::COUNTRY_HK,
            self::COUNTRY_HM,
            self::COUNTRY_HN,
            self::COUNTRY_HR,
            self::COUNTRY_HT,
            self::COUNTRY_HU,
            self::COUNTRY_ID,
            self::COUNTRY_IN,
            self::COUNTRY_IO,
            self::COUNTRY_IE,
            self::COUNTRY_IR,
            self::COUNTRY_IQ,
            self::COUNTRY_IS,
            self::COUNTRY_IL,
            self::COUNTRY_IT,
            self::COUNTRY_JM,
            self::COUNTRY_JO,
            self::COUNTRY_JP,
            self::COUNTRY_KZ,
            self::COUNTRY_KE,
            self::COUNTRY_KG,
            self::COUNTRY_KH,
            self::COUNTRY_KI,
            self::COUNTRY_KN,
            self::COUNTRY_KR,
            self::COUNTRY_KW,
            self::COUNTRY_LA,
            self::COUNTRY_LB,
            self::COUNTRY_LR,
            self::COUNTRY_LY,
            self::COUNTRY_LC,
            self::COUNTRY_LI,
            self::COUNTRY_LK,
            self::COUNTRY_LS,
            self::COUNTRY_LT,
            self::COUNTRY_LU,
            self::COUNTRY_LV,
            self::COUNTRY_MO,
            self::COUNTRY_MA,
            self::COUNTRY_MC,
            self::COUNTRY_MD,
            self::COUNTRY_MG,
            self::COUNTRY_MV,
            self::COUNTRY_MX,
            self::COUNTRY_MH,
            self::COUNTRY_MK,
            self::COUNTRY_ML,
            self::COUNTRY_MT,
            self::COUNTRY_MM,
            self::COUNTRY_MN,
            self::COUNTRY_MP,
            self::COUNTRY_MZ,
            self::COUNTRY_MR,
            self::COUNTRY_MS,
            self::COUNTRY_MQ,
            self::COUNTRY_MU,
            self::COUNTRY_MW,
            self::COUNTRY_MY,
            self::COUNTRY_YT,
            self::COUNTRY_NA,
            self::COUNTRY_NC,
            self::COUNTRY_NE,
            self::COUNTRY_NF,
            self::COUNTRY_NG,
            self::COUNTRY_NI,
            self::COUNTRY_NU,
            self::COUNTRY_NL,
            self::COUNTRY_NO,
            self::COUNTRY_NP,
            self::COUNTRY_NR,
            self::COUNTRY_NZ,
            self::COUNTRY_OM,
            self::COUNTRY_PK,
            self::COUNTRY_PA,
            self::COUNTRY_PN,
            self::COUNTRY_PE,
            self::COUNTRY_PH,
            self::COUNTRY_PW,
            self::COUNTRY_PG,
            self::COUNTRY_PL,
            self::COUNTRY_PR,
            self::COUNTRY_KP,
            self::COUNTRY_PT,
            self::COUNTRY_PY,
            self::COUNTRY_PF,
            self::COUNTRY_QA,
            self::COUNTRY_RE,
            self::COUNTRY_RO,
            self::COUNTRY_RU,
            self::COUNTRY_RW,
            self::COUNTRY_SA,
            self::COUNTRY_SD,
            self::COUNTRY_SN,
            self::COUNTRY_SG,
            self::COUNTRY_GS,
            self::COUNTRY_SH,
            self::COUNTRY_SJ,
            self::COUNTRY_SB,
            self::COUNTRY_SL,
            self::COUNTRY_SV,
            self::COUNTRY_SM,
            self::COUNTRY_SO,
            self::COUNTRY_PM,
            self::COUNTRY_ST,
            self::COUNTRY_SR,
            self::COUNTRY_SK,
            self::COUNTRY_SI,
            self::COUNTRY_SE,
            self::COUNTRY_SZ,
            self::COUNTRY_SC,
            self::COUNTRY_SY,
            self::COUNTRY_TC,
            self::COUNTRY_TD,
            self::COUNTRY_TG,
            self::COUNTRY_TH,
            self::COUNTRY_TJ,
            self::COUNTRY_TK,
            self::COUNTRY_TM,
            self::COUNTRY_TP,
            self::COUNTRY_TO,
            self::COUNTRY_TT,
            self::COUNTRY_TN,
            self::COUNTRY_TR,
            self::COUNTRY_TV,
            self::COUNTRY_TW,
            self::COUNTRY_TZ,
            self::COUNTRY_UG,
            self::COUNTRY_UA,
            self::COUNTRY_UM,
            self::COUNTRY_UY,
            self::COUNTRY_US,
            self::COUNTRY_UZ,
            self::COUNTRY_VA,
            self::COUNTRY_VC,
            self::COUNTRY_VE,
            self::COUNTRY_VG,
            self::COUNTRY_VI,
            self::COUNTRY_VN,
            self::COUNTRY_VU,
            self::COUNTRY_WF,
            self::COUNTRY_WS,
            self::COUNTRY_YE,
            self::COUNTRY_ZA,
            self::COUNTRY_ZM,
            self::COUNTRY_ZW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['civility'] = isset($data['civility']) ? $data['civility'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['customer_ip'] = isset($data['customer_ip']) ? $data['customer_ip'] : null;
        $this->container['customer_ref'] = isset($data['customer_ref']) ? $data['customer_ref'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCivilityAllowableValues();
        if (!is_null($this->container['civility']) && !in_array($this->container['civility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'civility', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($this->container['country']) && !in_array($this->container['country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'country', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_address
     *
     * @return \CpaymentConnector\Model\ShippingAddress|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \CpaymentConnector\Model\ShippingAddress|null $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime|null $birth_date Gets or sets the birth date.
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets civility
     *
     * @return string|null
     */
    public function getCivility()
    {
        return $this->container['civility'];
    }

    /**
     * Sets civility
     *
     * @param string|null $civility Gets or sets the civility.
     *
     * @return $this
     */
    public function setCivility($civility)
    {
        $allowedValues = $this->getCivilityAllowableValues();
        if (!is_null($civility) && !in_array($civility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'civility', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['civility'] = $civility;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Gets or sets the country field.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($country) && !in_array($country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'country', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets customer_ip
     *
     * @return string|null
     */
    public function getCustomerIp()
    {
        return $this->container['customer_ip'];
    }

    /**
     * Sets customer_ip
     *
     * @param string|null $customer_ip Gets or sets the customer ip field.
     *
     * @return $this
     */
    public function setCustomerIp($customer_ip)
    {
        $this->container['customer_ip'] = $customer_ip;

        return $this;
    }

    /**
     * Gets customer_ref
     *
     * @return string|null
     */
    public function getCustomerRef()
    {
        return $this->container['customer_ref'];
    }

    /**
     * Sets customer_ref
     *
     * @param string|null $customer_ref Gets or sets the customer reference field.
     *
     * @return $this
     */
    public function setCustomerRef($customer_ref)
    {
        $this->container['customer_ref'] = $customer_ref;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \CpaymentConnector\Model\ShippingAddress|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \CpaymentConnector\Model\ShippingAddress|null $delivery_address delivery_address
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Gets or sets the email.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Gets or sets the first name.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Gets or sets the last name.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone Gets or sets the mobile phone.
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Gets or sets the phone.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


