<?php
/**
 * CardPaymentContextData
 *
 * PHP version 5
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CpaymentConnector\Model;

use \ArrayAccess;
use \CpaymentConnector\ObjectSerializer;

/**
 * CardPaymentContextData Class Doc Comment
 *
 * @category Class
 * @description All context data needed
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CardPaymentContextData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardPaymentContextData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_id' => 'int',
        'merchant_site_id' => 'string',
        'currency' => 'string',
        'country' => 'string',
        'payment_option_ref' => 'string',
        'customer_ref' => 'string',
        'payment_attempt' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'merchant_id' => 'int32',
        'merchant_site_id' => null,
        'currency' => null,
        'country' => null,
        'payment_option_ref' => null,
        'customer_ref' => null,
        'payment_attempt' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchantId',
        'merchant_site_id' => 'merchantSiteId',
        'currency' => 'currency',
        'country' => 'country',
        'payment_option_ref' => 'paymentOptionRef',
        'customer_ref' => 'customerRef',
        'payment_attempt' => 'paymentAttempt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'merchant_site_id' => 'setMerchantSiteId',
        'currency' => 'setCurrency',
        'country' => 'setCountry',
        'payment_option_ref' => 'setPaymentOptionRef',
        'customer_ref' => 'setCustomerRef',
        'payment_attempt' => 'setPaymentAttempt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'merchant_site_id' => 'getMerchantSiteId',
        'currency' => 'getCurrency',
        'country' => 'getCountry',
        'payment_option_ref' => 'getPaymentOptionRef',
        'customer_ref' => 'getCustomerRef',
        'payment_attempt' => 'getPaymentAttempt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CURRENCY_UNKNOWN = 'unknown';
    const CURRENCY_ALL = 'all';
    const CURRENCY_DZD = 'dzd';
    const CURRENCY_ARS = 'ars';
    const CURRENCY_AUD = 'aud';
    const CURRENCY_BSD = 'bsd';
    const CURRENCY_BHD = 'bhd';
    const CURRENCY_BDT = 'bdt';
    const CURRENCY_AMD = 'amd';
    const CURRENCY_BBD = 'bbd';
    const CURRENCY_BMD = 'bmd';
    const CURRENCY_BTN = 'btn';
    const CURRENCY_BOB = 'bob';
    const CURRENCY_BWP = 'bwp';
    const CURRENCY_BZD = 'bzd';
    const CURRENCY_SBD = 'sbd';
    const CURRENCY_BND = 'bnd';
    const CURRENCY_MMK = 'mmk';
    const CURRENCY_BIF = 'bif';
    const CURRENCY_KHR = 'khr';
    const CURRENCY_CAD = 'cad';
    const CURRENCY_CVE = 'cve';
    const CURRENCY_KYD = 'kyd';
    const CURRENCY_LKR = 'lkr';
    const CURRENCY_CLP = 'clp';
    const CURRENCY_CNY = 'cny';
    const CURRENCY_COP = 'cop';
    const CURRENCY_KMF = 'kmf';
    const CURRENCY_CRC = 'crc';
    const CURRENCY_HRK = 'hrk';
    const CURRENCY_CUP = 'cup';
    const CURRENCY_CZK = 'czk';
    const CURRENCY_DKK = 'dkk';
    const CURRENCY_DOP = 'dop';
    const CURRENCY_SVC = 'svc';
    const CURRENCY_ETB = 'etb';
    const CURRENCY_ERN = 'ern';
    const CURRENCY_FKP = 'fkp';
    const CURRENCY_FJD = 'fjd';
    const CURRENCY_DJF = 'djf';
    const CURRENCY_GMD = 'gmd';
    const CURRENCY_GIP = 'gip';
    const CURRENCY_GTQ = 'gtq';
    const CURRENCY_GNF = 'gnf';
    const CURRENCY_GYD = 'gyd';
    const CURRENCY_HTG = 'htg';
    const CURRENCY_HNL = 'hnl';
    const CURRENCY_HKD = 'hkd';
    const CURRENCY_HUF = 'huf';
    const CURRENCY_ISK = 'isk';
    const CURRENCY_INR = 'inr';
    const CURRENCY_IDR = 'idr';
    const CURRENCY_IRR = 'irr';
    const CURRENCY_IQD = 'iqd';
    const CURRENCY_ILS = 'ils';
    const CURRENCY_JMD = 'jmd';
    const CURRENCY_JPY = 'jpy';
    const CURRENCY_KZT = 'kzt';
    const CURRENCY_JOD = 'jod';
    const CURRENCY_KES = 'kes';
    const CURRENCY_KPW = 'kpw';
    const CURRENCY_KRW = 'krw';
    const CURRENCY_KWD = 'kwd';
    const CURRENCY_KGS = 'kgs';
    const CURRENCY_LAK = 'lak';
    const CURRENCY_LBP = 'lbp';
    const CURRENCY_LSL = 'lsl';
    const CURRENCY_LRD = 'lrd';
    const CURRENCY_LYD = 'lyd';
    const CURRENCY_MOP = 'mop';
    const CURRENCY_MWK = 'mwk';
    const CURRENCY_MYR = 'myr';
    const CURRENCY_MVR = 'mvr';
    const CURRENCY_MRO = 'mro';
    const CURRENCY_MUR = 'mur';
    const CURRENCY_MXN = 'mxn';
    const CURRENCY_MNT = 'mnt';
    const CURRENCY_MDL = 'mdl';
    const CURRENCY_MAD = 'mad';
    const CURRENCY_OMR = 'omr';
    const CURRENCY_NAD = 'nad';
    const CURRENCY_NPR = 'npr';
    const CURRENCY_ANG = 'ang';
    const CURRENCY_AWG = 'awg';
    const CURRENCY_VUV = 'vuv';
    const CURRENCY_NZD = 'nzd';
    const CURRENCY_NIO = 'nio';
    const CURRENCY_NGN = 'ngn';
    const CURRENCY_NOK = 'nok';
    const CURRENCY_PKR = 'pkr';
    const CURRENCY_PAB = 'pab';
    const CURRENCY_PGK = 'pgk';
    const CURRENCY_PYG = 'pyg';
    const CURRENCY_PEN = 'pen';
    const CURRENCY_PHP = 'php';
    const CURRENCY_QAR = 'qar';
    const CURRENCY_RUB = 'rub';
    const CURRENCY_RWF = 'rwf';
    const CURRENCY_SHP = 'shp';
    const CURRENCY_STD = 'std';
    const CURRENCY_SAR = 'sar';
    const CURRENCY_SCR = 'scr';
    const CURRENCY_SLL = 'sll';
    const CURRENCY_SGD = 'sgd';
    const CURRENCY_VND = 'vnd';
    const CURRENCY_SOS = 'sos';
    const CURRENCY_ZAR = 'zar';
    const CURRENCY_SSP = 'ssp';
    const CURRENCY_SZL = 'szl';
    const CURRENCY_SEK = 'sek';
    const CURRENCY_CHF = 'chf';
    const CURRENCY_SYP = 'syp';
    const CURRENCY_THB = 'thb';
    const CURRENCY_TOP = 'top';
    const CURRENCY_TTD = 'ttd';
    const CURRENCY_AED = 'aed';
    const CURRENCY_TND = 'tnd';
    const CURRENCY_UGX = 'ugx';
    const CURRENCY_MKD = 'mkd';
    const CURRENCY_EGP = 'egp';
    const CURRENCY_GBP = 'gbp';
    const CURRENCY_TZS = 'tzs';
    const CURRENCY_USD = 'usd';
    const CURRENCY_UYU = 'uyu';
    const CURRENCY_UZS = 'uzs';
    const CURRENCY_WST = 'wst';
    const CURRENCY_YER = 'yer';
    const CURRENCY_TWD = 'twd';
    const CURRENCY_CUC = 'cuc';
    const CURRENCY_ZWL = 'zwl';
    const CURRENCY_TMT = 'tmt';
    const CURRENCY_GHS = 'ghs';
    const CURRENCY_VEF = 'vef';
    const CURRENCY_SDG = 'sdg';
    const CURRENCY_UYI = 'uyi';
    const CURRENCY_RSD = 'rsd';
    const CURRENCY_MZN = 'mzn';
    const CURRENCY_AZN = 'azn';
    const CURRENCY_RON = 'ron';
    const CURRENCY_CHE = 'che';
    const CURRENCY_CHW = 'chw';
    const CURRENCY__TRY = 'try';
    const CURRENCY_XAF = 'xaf';
    const CURRENCY_XCD = 'xcd';
    const CURRENCY_XOF = 'xof';
    const CURRENCY_XPF = 'xpf';
    const CURRENCY_XBA = 'xba';
    const CURRENCY_XBB = 'xbb';
    const CURRENCY_XBC = 'xbc';
    const CURRENCY_XBD = 'xbd';
    const CURRENCY_XAU = 'xau';
    const CURRENCY_XDR = 'xdr';
    const CURRENCY_XAG = 'xag';
    const CURRENCY_XPT = 'xpt';
    const CURRENCY_XTS = 'xts';
    const CURRENCY_XPD = 'xpd';
    const CURRENCY_XUA = 'xua';
    const CURRENCY_ZMW = 'zmw';
    const CURRENCY_SRD = 'srd';
    const CURRENCY_MGA = 'mga';
    const CURRENCY_COU = 'cou';
    const CURRENCY_AFN = 'afn';
    const CURRENCY_TJS = 'tjs';
    const CURRENCY_AOA = 'aoa';
    const CURRENCY_BYR = 'byr';
    const CURRENCY_BGN = 'bgn';
    const CURRENCY_CDF = 'cdf';
    const CURRENCY_BAM = 'bam';
    const CURRENCY_EUR = 'eur';
    const CURRENCY_MXV = 'mxv';
    const CURRENCY_UAH = 'uah';
    const CURRENCY_GEL = 'gel';
    const CURRENCY_BOV = 'bov';
    const CURRENCY_PLN = 'pln';
    const CURRENCY_BRL = 'brl';
    const CURRENCY_CLF = 'clf';
    const CURRENCY_XSU = 'xsu';
    const CURRENCY_USN = 'usn';
    const CURRENCY_XXX = 'xxx';
    const COUNTRY_UNKNOWN = 'unknown';
    const COUNTRY_AW = 'aw';
    const COUNTRY_AF = 'af';
    const COUNTRY_AO = 'ao';
    const COUNTRY_AI = 'ai';
    const COUNTRY_AL = 'al';
    const COUNTRY_AD = 'ad';
    const COUNTRY_AN = 'an';
    const COUNTRY_AE = 'ae';
    const COUNTRY_AR = 'ar';
    const COUNTRY_AM = 'am';
    const COUNTRY__AS = 'as';
    const COUNTRY_AQ = 'aq';
    const COUNTRY_TF = 'tf';
    const COUNTRY_AG = 'ag';
    const COUNTRY_AU = 'au';
    const COUNTRY_AT = 'at';
    const COUNTRY_AZ = 'az';
    const COUNTRY_BI = 'bi';
    const COUNTRY_BE = 'be';
    const COUNTRY_BJ = 'bj';
    const COUNTRY_BF = 'bf';
    const COUNTRY_BD = 'bd';
    const COUNTRY_BG = 'bg';
    const COUNTRY_BH = 'bh';
    const COUNTRY_BS = 'bs';
    const COUNTRY_BA = 'ba';
    const COUNTRY_BY = 'by';
    const COUNTRY_BZ = 'bz';
    const COUNTRY_BM = 'bm';
    const COUNTRY_BO = 'bo';
    const COUNTRY_BR = 'br';
    const COUNTRY_BB = 'bb';
    const COUNTRY_BN = 'bn';
    const COUNTRY_BT = 'bt';
    const COUNTRY_BV = 'bv';
    const COUNTRY_BW = 'bw';
    const COUNTRY_CF = 'cf';
    const COUNTRY_CA = 'ca';
    const COUNTRY_CC = 'cc';
    const COUNTRY_CH = 'ch';
    const COUNTRY_CL = 'cl';
    const COUNTRY_CN = 'cn';
    const COUNTRY_CI = 'ci';
    const COUNTRY_CM = 'cm';
    const COUNTRY_CG = 'cg';
    const COUNTRY_CK = 'ck';
    const COUNTRY_CO = 'co';
    const COUNTRY_KM = 'km';
    const COUNTRY_CV = 'cv';
    const COUNTRY_CR = 'cr';
    const COUNTRY_CU = 'cu';
    const COUNTRY_CX = 'cx';
    const COUNTRY_KY = 'ky';
    const COUNTRY_CY = 'cy';
    const COUNTRY_CZ = 'cz';
    const COUNTRY_DE = 'de';
    const COUNTRY_DJ = 'dj';
    const COUNTRY_DM = 'dm';
    const COUNTRY_DK = 'dk';
    const COUNTRY__DO = 'do';
    const COUNTRY_DZ = 'dz';
    const COUNTRY_EC = 'ec';
    const COUNTRY_EG = 'eg';
    const COUNTRY_ER = 'er';
    const COUNTRY_EH = 'eh';
    const COUNTRY_ES = 'es';
    const COUNTRY_EE = 'ee';
    const COUNTRY_ET = 'et';
    const COUNTRY_FI = 'fi';
    const COUNTRY_FJ = 'fj';
    const COUNTRY_FK = 'fk';
    const COUNTRY_FR = 'fr';
    const COUNTRY_FO = 'fo';
    const COUNTRY_FM = 'fm';
    const COUNTRY_GA = 'ga';
    const COUNTRY_GB = 'gb';
    const COUNTRY_GE = 'ge';
    const COUNTRY_GH = 'gh';
    const COUNTRY_GI = 'gi';
    const COUNTRY_GN = 'gn';
    const COUNTRY_GP = 'gp';
    const COUNTRY_GM = 'gm';
    const COUNTRY_GW = 'gw';
    const COUNTRY_GQ = 'gq';
    const COUNTRY_GR = 'gr';
    const COUNTRY_GD = 'gd';
    const COUNTRY_GL = 'gl';
    const COUNTRY_GT = 'gt';
    const COUNTRY_GF = 'gf';
    const COUNTRY_GU = 'gu';
    const COUNTRY_GY = 'gy';
    const COUNTRY_HK = 'hk';
    const COUNTRY_HM = 'hm';
    const COUNTRY_HN = 'hn';
    const COUNTRY_HR = 'hr';
    const COUNTRY_HT = 'ht';
    const COUNTRY_HU = 'hu';
    const COUNTRY_ID = 'id';
    const COUNTRY_IN = 'in';
    const COUNTRY_IO = 'io';
    const COUNTRY_IE = 'ie';
    const COUNTRY_IR = 'ir';
    const COUNTRY_IQ = 'iq';
    const COUNTRY_IS = 'is';
    const COUNTRY_IL = 'il';
    const COUNTRY_IT = 'it';
    const COUNTRY_JM = 'jm';
    const COUNTRY_JO = 'jo';
    const COUNTRY_JP = 'jp';
    const COUNTRY_KZ = 'kz';
    const COUNTRY_KE = 'ke';
    const COUNTRY_KG = 'kg';
    const COUNTRY_KH = 'kh';
    const COUNTRY_KI = 'ki';
    const COUNTRY_KN = 'kn';
    const COUNTRY_KR = 'kr';
    const COUNTRY_KW = 'kw';
    const COUNTRY_LA = 'la';
    const COUNTRY_LB = 'lb';
    const COUNTRY_LR = 'lr';
    const COUNTRY_LY = 'ly';
    const COUNTRY_LC = 'lc';
    const COUNTRY_LI = 'li';
    const COUNTRY_LK = 'lk';
    const COUNTRY_LS = 'ls';
    const COUNTRY_LT = 'lt';
    const COUNTRY_LU = 'lu';
    const COUNTRY_LV = 'lv';
    const COUNTRY_MO = 'mo';
    const COUNTRY_MA = 'ma';
    const COUNTRY_MC = 'mc';
    const COUNTRY_MD = 'md';
    const COUNTRY_MG = 'mg';
    const COUNTRY_MV = 'mv';
    const COUNTRY_MX = 'mx';
    const COUNTRY_MH = 'mh';
    const COUNTRY_MK = 'mk';
    const COUNTRY_ML = 'ml';
    const COUNTRY_MT = 'mt';
    const COUNTRY_MM = 'mm';
    const COUNTRY_MN = 'mn';
    const COUNTRY_MP = 'mp';
    const COUNTRY_MZ = 'mz';
    const COUNTRY_MR = 'mr';
    const COUNTRY_MS = 'ms';
    const COUNTRY_MQ = 'mq';
    const COUNTRY_MU = 'mu';
    const COUNTRY_MW = 'mw';
    const COUNTRY_MY = 'my';
    const COUNTRY_YT = 'yt';
    const COUNTRY_NA = 'na';
    const COUNTRY_NC = 'nc';
    const COUNTRY_NE = 'ne';
    const COUNTRY_NF = 'nf';
    const COUNTRY_NG = 'ng';
    const COUNTRY_NI = 'ni';
    const COUNTRY_NU = 'nu';
    const COUNTRY_NL = 'nl';
    const COUNTRY_NO = 'no';
    const COUNTRY_NP = 'np';
    const COUNTRY_NR = 'nr';
    const COUNTRY_NZ = 'nz';
    const COUNTRY_OM = 'om';
    const COUNTRY_PK = 'pk';
    const COUNTRY_PA = 'pa';
    const COUNTRY_PN = 'pn';
    const COUNTRY_PE = 'pe';
    const COUNTRY_PH = 'ph';
    const COUNTRY_PW = 'pw';
    const COUNTRY_PG = 'pg';
    const COUNTRY_PL = 'pl';
    const COUNTRY_PR = 'pr';
    const COUNTRY_KP = 'kp';
    const COUNTRY_PT = 'pt';
    const COUNTRY_PY = 'py';
    const COUNTRY_PF = 'pf';
    const COUNTRY_QA = 'qa';
    const COUNTRY_RE = 're';
    const COUNTRY_RO = 'ro';
    const COUNTRY_RU = 'ru';
    const COUNTRY_RW = 'rw';
    const COUNTRY_SA = 'sa';
    const COUNTRY_SD = 'sd';
    const COUNTRY_SN = 'sn';
    const COUNTRY_SG = 'sg';
    const COUNTRY_GS = 'gs';
    const COUNTRY_SH = 'sh';
    const COUNTRY_SJ = 'sj';
    const COUNTRY_SB = 'sb';
    const COUNTRY_SL = 'sl';
    const COUNTRY_SV = 'sv';
    const COUNTRY_SM = 'sm';
    const COUNTRY_SO = 'so';
    const COUNTRY_PM = 'pm';
    const COUNTRY_ST = 'st';
    const COUNTRY_SR = 'sr';
    const COUNTRY_SK = 'sk';
    const COUNTRY_SI = 'si';
    const COUNTRY_SE = 'se';
    const COUNTRY_SZ = 'sz';
    const COUNTRY_SC = 'sc';
    const COUNTRY_SY = 'sy';
    const COUNTRY_TC = 'tc';
    const COUNTRY_TD = 'td';
    const COUNTRY_TG = 'tg';
    const COUNTRY_TH = 'th';
    const COUNTRY_TJ = 'tj';
    const COUNTRY_TK = 'tk';
    const COUNTRY_TM = 'tm';
    const COUNTRY_TP = 'tp';
    const COUNTRY_TO = 'to';
    const COUNTRY_TT = 'tt';
    const COUNTRY_TN = 'tn';
    const COUNTRY_TR = 'tr';
    const COUNTRY_TV = 'tv';
    const COUNTRY_TW = 'tw';
    const COUNTRY_TZ = 'tz';
    const COUNTRY_UG = 'ug';
    const COUNTRY_UA = 'ua';
    const COUNTRY_UM = 'um';
    const COUNTRY_UY = 'uy';
    const COUNTRY_US = 'us';
    const COUNTRY_UZ = 'uz';
    const COUNTRY_VA = 'va';
    const COUNTRY_VC = 'vc';
    const COUNTRY_VE = 've';
    const COUNTRY_VG = 'vg';
    const COUNTRY_VI = 'vi';
    const COUNTRY_VN = 'vn';
    const COUNTRY_VU = 'vu';
    const COUNTRY_WF = 'wf';
    const COUNTRY_WS = 'ws';
    const COUNTRY_YE = 'ye';
    const COUNTRY_ZA = 'za';
    const COUNTRY_ZM = 'zm';
    const COUNTRY_ZW = 'zw';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_UNKNOWN,
            self::CURRENCY_ALL,
            self::CURRENCY_DZD,
            self::CURRENCY_ARS,
            self::CURRENCY_AUD,
            self::CURRENCY_BSD,
            self::CURRENCY_BHD,
            self::CURRENCY_BDT,
            self::CURRENCY_AMD,
            self::CURRENCY_BBD,
            self::CURRENCY_BMD,
            self::CURRENCY_BTN,
            self::CURRENCY_BOB,
            self::CURRENCY_BWP,
            self::CURRENCY_BZD,
            self::CURRENCY_SBD,
            self::CURRENCY_BND,
            self::CURRENCY_MMK,
            self::CURRENCY_BIF,
            self::CURRENCY_KHR,
            self::CURRENCY_CAD,
            self::CURRENCY_CVE,
            self::CURRENCY_KYD,
            self::CURRENCY_LKR,
            self::CURRENCY_CLP,
            self::CURRENCY_CNY,
            self::CURRENCY_COP,
            self::CURRENCY_KMF,
            self::CURRENCY_CRC,
            self::CURRENCY_HRK,
            self::CURRENCY_CUP,
            self::CURRENCY_CZK,
            self::CURRENCY_DKK,
            self::CURRENCY_DOP,
            self::CURRENCY_SVC,
            self::CURRENCY_ETB,
            self::CURRENCY_ERN,
            self::CURRENCY_FKP,
            self::CURRENCY_FJD,
            self::CURRENCY_DJF,
            self::CURRENCY_GMD,
            self::CURRENCY_GIP,
            self::CURRENCY_GTQ,
            self::CURRENCY_GNF,
            self::CURRENCY_GYD,
            self::CURRENCY_HTG,
            self::CURRENCY_HNL,
            self::CURRENCY_HKD,
            self::CURRENCY_HUF,
            self::CURRENCY_ISK,
            self::CURRENCY_INR,
            self::CURRENCY_IDR,
            self::CURRENCY_IRR,
            self::CURRENCY_IQD,
            self::CURRENCY_ILS,
            self::CURRENCY_JMD,
            self::CURRENCY_JPY,
            self::CURRENCY_KZT,
            self::CURRENCY_JOD,
            self::CURRENCY_KES,
            self::CURRENCY_KPW,
            self::CURRENCY_KRW,
            self::CURRENCY_KWD,
            self::CURRENCY_KGS,
            self::CURRENCY_LAK,
            self::CURRENCY_LBP,
            self::CURRENCY_LSL,
            self::CURRENCY_LRD,
            self::CURRENCY_LYD,
            self::CURRENCY_MOP,
            self::CURRENCY_MWK,
            self::CURRENCY_MYR,
            self::CURRENCY_MVR,
            self::CURRENCY_MRO,
            self::CURRENCY_MUR,
            self::CURRENCY_MXN,
            self::CURRENCY_MNT,
            self::CURRENCY_MDL,
            self::CURRENCY_MAD,
            self::CURRENCY_OMR,
            self::CURRENCY_NAD,
            self::CURRENCY_NPR,
            self::CURRENCY_ANG,
            self::CURRENCY_AWG,
            self::CURRENCY_VUV,
            self::CURRENCY_NZD,
            self::CURRENCY_NIO,
            self::CURRENCY_NGN,
            self::CURRENCY_NOK,
            self::CURRENCY_PKR,
            self::CURRENCY_PAB,
            self::CURRENCY_PGK,
            self::CURRENCY_PYG,
            self::CURRENCY_PEN,
            self::CURRENCY_PHP,
            self::CURRENCY_QAR,
            self::CURRENCY_RUB,
            self::CURRENCY_RWF,
            self::CURRENCY_SHP,
            self::CURRENCY_STD,
            self::CURRENCY_SAR,
            self::CURRENCY_SCR,
            self::CURRENCY_SLL,
            self::CURRENCY_SGD,
            self::CURRENCY_VND,
            self::CURRENCY_SOS,
            self::CURRENCY_ZAR,
            self::CURRENCY_SSP,
            self::CURRENCY_SZL,
            self::CURRENCY_SEK,
            self::CURRENCY_CHF,
            self::CURRENCY_SYP,
            self::CURRENCY_THB,
            self::CURRENCY_TOP,
            self::CURRENCY_TTD,
            self::CURRENCY_AED,
            self::CURRENCY_TND,
            self::CURRENCY_UGX,
            self::CURRENCY_MKD,
            self::CURRENCY_EGP,
            self::CURRENCY_GBP,
            self::CURRENCY_TZS,
            self::CURRENCY_USD,
            self::CURRENCY_UYU,
            self::CURRENCY_UZS,
            self::CURRENCY_WST,
            self::CURRENCY_YER,
            self::CURRENCY_TWD,
            self::CURRENCY_CUC,
            self::CURRENCY_ZWL,
            self::CURRENCY_TMT,
            self::CURRENCY_GHS,
            self::CURRENCY_VEF,
            self::CURRENCY_SDG,
            self::CURRENCY_UYI,
            self::CURRENCY_RSD,
            self::CURRENCY_MZN,
            self::CURRENCY_AZN,
            self::CURRENCY_RON,
            self::CURRENCY_CHE,
            self::CURRENCY_CHW,
            self::CURRENCY__TRY,
            self::CURRENCY_XAF,
            self::CURRENCY_XCD,
            self::CURRENCY_XOF,
            self::CURRENCY_XPF,
            self::CURRENCY_XBA,
            self::CURRENCY_XBB,
            self::CURRENCY_XBC,
            self::CURRENCY_XBD,
            self::CURRENCY_XAU,
            self::CURRENCY_XDR,
            self::CURRENCY_XAG,
            self::CURRENCY_XPT,
            self::CURRENCY_XTS,
            self::CURRENCY_XPD,
            self::CURRENCY_XUA,
            self::CURRENCY_ZMW,
            self::CURRENCY_SRD,
            self::CURRENCY_MGA,
            self::CURRENCY_COU,
            self::CURRENCY_AFN,
            self::CURRENCY_TJS,
            self::CURRENCY_AOA,
            self::CURRENCY_BYR,
            self::CURRENCY_BGN,
            self::CURRENCY_CDF,
            self::CURRENCY_BAM,
            self::CURRENCY_EUR,
            self::CURRENCY_MXV,
            self::CURRENCY_UAH,
            self::CURRENCY_GEL,
            self::CURRENCY_BOV,
            self::CURRENCY_PLN,
            self::CURRENCY_BRL,
            self::CURRENCY_CLF,
            self::CURRENCY_XSU,
            self::CURRENCY_USN,
            self::CURRENCY_XXX,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryAllowableValues()
    {
        return [
            self::COUNTRY_UNKNOWN,
            self::COUNTRY_AW,
            self::COUNTRY_AF,
            self::COUNTRY_AO,
            self::COUNTRY_AI,
            self::COUNTRY_AL,
            self::COUNTRY_AD,
            self::COUNTRY_AN,
            self::COUNTRY_AE,
            self::COUNTRY_AR,
            self::COUNTRY_AM,
            self::COUNTRY__AS,
            self::COUNTRY_AQ,
            self::COUNTRY_TF,
            self::COUNTRY_AG,
            self::COUNTRY_AU,
            self::COUNTRY_AT,
            self::COUNTRY_AZ,
            self::COUNTRY_BI,
            self::COUNTRY_BE,
            self::COUNTRY_BJ,
            self::COUNTRY_BF,
            self::COUNTRY_BD,
            self::COUNTRY_BG,
            self::COUNTRY_BH,
            self::COUNTRY_BS,
            self::COUNTRY_BA,
            self::COUNTRY_BY,
            self::COUNTRY_BZ,
            self::COUNTRY_BM,
            self::COUNTRY_BO,
            self::COUNTRY_BR,
            self::COUNTRY_BB,
            self::COUNTRY_BN,
            self::COUNTRY_BT,
            self::COUNTRY_BV,
            self::COUNTRY_BW,
            self::COUNTRY_CF,
            self::COUNTRY_CA,
            self::COUNTRY_CC,
            self::COUNTRY_CH,
            self::COUNTRY_CL,
            self::COUNTRY_CN,
            self::COUNTRY_CI,
            self::COUNTRY_CM,
            self::COUNTRY_CG,
            self::COUNTRY_CK,
            self::COUNTRY_CO,
            self::COUNTRY_KM,
            self::COUNTRY_CV,
            self::COUNTRY_CR,
            self::COUNTRY_CU,
            self::COUNTRY_CX,
            self::COUNTRY_KY,
            self::COUNTRY_CY,
            self::COUNTRY_CZ,
            self::COUNTRY_DE,
            self::COUNTRY_DJ,
            self::COUNTRY_DM,
            self::COUNTRY_DK,
            self::COUNTRY__DO,
            self::COUNTRY_DZ,
            self::COUNTRY_EC,
            self::COUNTRY_EG,
            self::COUNTRY_ER,
            self::COUNTRY_EH,
            self::COUNTRY_ES,
            self::COUNTRY_EE,
            self::COUNTRY_ET,
            self::COUNTRY_FI,
            self::COUNTRY_FJ,
            self::COUNTRY_FK,
            self::COUNTRY_FR,
            self::COUNTRY_FO,
            self::COUNTRY_FM,
            self::COUNTRY_GA,
            self::COUNTRY_GB,
            self::COUNTRY_GE,
            self::COUNTRY_GH,
            self::COUNTRY_GI,
            self::COUNTRY_GN,
            self::COUNTRY_GP,
            self::COUNTRY_GM,
            self::COUNTRY_GW,
            self::COUNTRY_GQ,
            self::COUNTRY_GR,
            self::COUNTRY_GD,
            self::COUNTRY_GL,
            self::COUNTRY_GT,
            self::COUNTRY_GF,
            self::COUNTRY_GU,
            self::COUNTRY_GY,
            self::COUNTRY_HK,
            self::COUNTRY_HM,
            self::COUNTRY_HN,
            self::COUNTRY_HR,
            self::COUNTRY_HT,
            self::COUNTRY_HU,
            self::COUNTRY_ID,
            self::COUNTRY_IN,
            self::COUNTRY_IO,
            self::COUNTRY_IE,
            self::COUNTRY_IR,
            self::COUNTRY_IQ,
            self::COUNTRY_IS,
            self::COUNTRY_IL,
            self::COUNTRY_IT,
            self::COUNTRY_JM,
            self::COUNTRY_JO,
            self::COUNTRY_JP,
            self::COUNTRY_KZ,
            self::COUNTRY_KE,
            self::COUNTRY_KG,
            self::COUNTRY_KH,
            self::COUNTRY_KI,
            self::COUNTRY_KN,
            self::COUNTRY_KR,
            self::COUNTRY_KW,
            self::COUNTRY_LA,
            self::COUNTRY_LB,
            self::COUNTRY_LR,
            self::COUNTRY_LY,
            self::COUNTRY_LC,
            self::COUNTRY_LI,
            self::COUNTRY_LK,
            self::COUNTRY_LS,
            self::COUNTRY_LT,
            self::COUNTRY_LU,
            self::COUNTRY_LV,
            self::COUNTRY_MO,
            self::COUNTRY_MA,
            self::COUNTRY_MC,
            self::COUNTRY_MD,
            self::COUNTRY_MG,
            self::COUNTRY_MV,
            self::COUNTRY_MX,
            self::COUNTRY_MH,
            self::COUNTRY_MK,
            self::COUNTRY_ML,
            self::COUNTRY_MT,
            self::COUNTRY_MM,
            self::COUNTRY_MN,
            self::COUNTRY_MP,
            self::COUNTRY_MZ,
            self::COUNTRY_MR,
            self::COUNTRY_MS,
            self::COUNTRY_MQ,
            self::COUNTRY_MU,
            self::COUNTRY_MW,
            self::COUNTRY_MY,
            self::COUNTRY_YT,
            self::COUNTRY_NA,
            self::COUNTRY_NC,
            self::COUNTRY_NE,
            self::COUNTRY_NF,
            self::COUNTRY_NG,
            self::COUNTRY_NI,
            self::COUNTRY_NU,
            self::COUNTRY_NL,
            self::COUNTRY_NO,
            self::COUNTRY_NP,
            self::COUNTRY_NR,
            self::COUNTRY_NZ,
            self::COUNTRY_OM,
            self::COUNTRY_PK,
            self::COUNTRY_PA,
            self::COUNTRY_PN,
            self::COUNTRY_PE,
            self::COUNTRY_PH,
            self::COUNTRY_PW,
            self::COUNTRY_PG,
            self::COUNTRY_PL,
            self::COUNTRY_PR,
            self::COUNTRY_KP,
            self::COUNTRY_PT,
            self::COUNTRY_PY,
            self::COUNTRY_PF,
            self::COUNTRY_QA,
            self::COUNTRY_RE,
            self::COUNTRY_RO,
            self::COUNTRY_RU,
            self::COUNTRY_RW,
            self::COUNTRY_SA,
            self::COUNTRY_SD,
            self::COUNTRY_SN,
            self::COUNTRY_SG,
            self::COUNTRY_GS,
            self::COUNTRY_SH,
            self::COUNTRY_SJ,
            self::COUNTRY_SB,
            self::COUNTRY_SL,
            self::COUNTRY_SV,
            self::COUNTRY_SM,
            self::COUNTRY_SO,
            self::COUNTRY_PM,
            self::COUNTRY_ST,
            self::COUNTRY_SR,
            self::COUNTRY_SK,
            self::COUNTRY_SI,
            self::COUNTRY_SE,
            self::COUNTRY_SZ,
            self::COUNTRY_SC,
            self::COUNTRY_SY,
            self::COUNTRY_TC,
            self::COUNTRY_TD,
            self::COUNTRY_TG,
            self::COUNTRY_TH,
            self::COUNTRY_TJ,
            self::COUNTRY_TK,
            self::COUNTRY_TM,
            self::COUNTRY_TP,
            self::COUNTRY_TO,
            self::COUNTRY_TT,
            self::COUNTRY_TN,
            self::COUNTRY_TR,
            self::COUNTRY_TV,
            self::COUNTRY_TW,
            self::COUNTRY_TZ,
            self::COUNTRY_UG,
            self::COUNTRY_UA,
            self::COUNTRY_UM,
            self::COUNTRY_UY,
            self::COUNTRY_US,
            self::COUNTRY_UZ,
            self::COUNTRY_VA,
            self::COUNTRY_VC,
            self::COUNTRY_VE,
            self::COUNTRY_VG,
            self::COUNTRY_VI,
            self::COUNTRY_VN,
            self::COUNTRY_VU,
            self::COUNTRY_WF,
            self::COUNTRY_WS,
            self::COUNTRY_YE,
            self::COUNTRY_ZA,
            self::COUNTRY_ZM,
            self::COUNTRY_ZW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['merchant_site_id'] = isset($data['merchant_site_id']) ? $data['merchant_site_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['payment_option_ref'] = isset($data['payment_option_ref']) ? $data['payment_option_ref'] : null;
        $this->container['customer_ref'] = isset($data['customer_ref']) ? $data['customer_ref'] : null;
        $this->container['payment_attempt'] = isset($data['payment_attempt']) ? $data['payment_attempt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['merchant_site_id'] === null) {
            $invalidProperties[] = "'merchant_site_id' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($this->container['country']) && !in_array($this->container['country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'country', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_option_ref'] === null) {
            $invalidProperties[] = "'payment_option_ref' can't be null";
        }
        if ($this->container['customer_ref'] === null) {
            $invalidProperties[] = "'customer_ref' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id The merchant identifier
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets merchant_site_id
     *
     * @return string
     */
    public function getMerchantSiteId()
    {
        return $this->container['merchant_site_id'];
    }

    /**
     * Sets merchant_site_id
     *
     * @param string $merchant_site_id The merchant site identifier
     *
     * @return $this
     */
    public function setMerchantSiteId($merchant_site_id)
    {
        $this->container['merchant_site_id'] = $merchant_site_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency of the order (ISO 4217)
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The code of the country (ISO 3166-1 alpha-2)
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $allowedValues = $this->getCountryAllowableValues();
        if (!in_array($country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'country', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets payment_option_ref
     *
     * @return string
     */
    public function getPaymentOptionRef()
    {
        return $this->container['payment_option_ref'];
    }

    /**
     * Sets payment_option_ref
     *
     * @param string $payment_option_ref The payment option reference
     *
     * @return $this
     */
    public function setPaymentOptionRef($payment_option_ref)
    {
        $this->container['payment_option_ref'] = $payment_option_ref;

        return $this;
    }

    /**
     * Gets customer_ref
     *
     * @return string
     */
    public function getCustomerRef()
    {
        return $this->container['customer_ref'];
    }

    /**
     * Sets customer_ref
     *
     * @param string $customer_ref The customer reference
     *
     * @return $this
     */
    public function setCustomerRef($customer_ref)
    {
        $this->container['customer_ref'] = $customer_ref;

        return $this;
    }

    /**
     * Gets payment_attempt
     *
     * @return int|null
     */
    public function getPaymentAttempt()
    {
        return $this->container['payment_attempt'];
    }

    /**
     * Sets payment_attempt
     *
     * @param int|null $payment_attempt The payment attempt number
     *
     * @return $this
     */
    public function setPaymentAttempt($payment_attempt)
    {
        $this->container['payment_attempt'] = $payment_attempt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


