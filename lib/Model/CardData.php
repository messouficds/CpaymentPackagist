<?php
/**
 * CardData
 *
 * PHP version 5
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CpaymentConnector\Model;

use \ArrayAccess;
use \CpaymentConnector\ObjectSerializer;

/**
 * CardData Class Doc Comment
 *
 * @category Class
 * @description All card Data
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CardData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_option_id' => 'int',
        'card_scheme' => 'string',
        'expiration_date' => '\DateTime',
        'card_number' => 'string',
        'security_number' => 'string',
        'card_label' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'card_option_id' => 'int32',
        'card_scheme' => null,
        'expiration_date' => 'date-time',
        'card_number' => null,
        'security_number' => null,
        'card_label' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_option_id' => 'cardOptionId',
        'card_scheme' => 'cardScheme',
        'expiration_date' => 'expirationDate',
        'card_number' => 'cardNumber',
        'security_number' => 'securityNumber',
        'card_label' => 'cardLabel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_option_id' => 'setCardOptionId',
        'card_scheme' => 'setCardScheme',
        'expiration_date' => 'setExpirationDate',
        'card_number' => 'setCardNumber',
        'security_number' => 'setSecurityNumber',
        'card_label' => 'setCardLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_option_id' => 'getCardOptionId',
        'card_scheme' => 'getCardScheme',
        'expiration_date' => 'getExpirationDate',
        'card_number' => 'getCardNumber',
        'security_number' => 'getSecurityNumber',
        'card_label' => 'getCardLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CARD_SCHEME_NONE = 'none';
    const CARD_SCHEME_CB = 'cb';
    const CARD_SCHEME_VISA = 'visa';
    const CARD_SCHEME_MASTER_CARD = 'masterCard';
    const CARD_SCHEME_CDISCOUNT = 'cdiscount';
    const CARD_SCHEME_CASINO = 'casino';
    const CARD_SCHEME_COFINOGA = 'cofinoga';
    const CARD_SCHEME_AMEX = 'amex';
    const CARD_SCHEME_FINAREF = 'finaref';
    const CARD_SCHEME_AURORE = 'aurore';
    const CARD_SCHEME_CDISCOUNT_CUP = 'cdiscount_Cup';
    const CARD_SCHEME_DINERS = 'diners';
    const CARD_SCHEME_EXITO = 'exito';
    const CARD_SCHEME_EXITO_FRANQUICIA = 'exitoFranquicia';
    const CARD_SCHEME_PAY_PAL = 'payPal';
    const CARD_SCHEME_BAN_CONTACT = 'banContact';
    const CARD_SCHEME_PSE = 'pse';
    const CARD_SCHEME_PAYLIB = 'paylib';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardSchemeAllowableValues()
    {
        return [
            self::CARD_SCHEME_NONE,
            self::CARD_SCHEME_CB,
            self::CARD_SCHEME_VISA,
            self::CARD_SCHEME_MASTER_CARD,
            self::CARD_SCHEME_CDISCOUNT,
            self::CARD_SCHEME_CASINO,
            self::CARD_SCHEME_COFINOGA,
            self::CARD_SCHEME_AMEX,
            self::CARD_SCHEME_FINAREF,
            self::CARD_SCHEME_AURORE,
            self::CARD_SCHEME_CDISCOUNT_CUP,
            self::CARD_SCHEME_DINERS,
            self::CARD_SCHEME_EXITO,
            self::CARD_SCHEME_EXITO_FRANQUICIA,
            self::CARD_SCHEME_PAY_PAL,
            self::CARD_SCHEME_BAN_CONTACT,
            self::CARD_SCHEME_PSE,
            self::CARD_SCHEME_PAYLIB,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_option_id'] = isset($data['card_option_id']) ? $data['card_option_id'] : null;
        $this->container['card_scheme'] = isset($data['card_scheme']) ? $data['card_scheme'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['security_number'] = isset($data['security_number']) ? $data['security_number'] : null;
        $this->container['card_label'] = isset($data['card_label']) ? $data['card_label'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['card_scheme'] === null) {
            $invalidProperties[] = "'card_scheme' can't be null";
        }
        $allowedValues = $this->getCardSchemeAllowableValues();
        if (!is_null($this->container['card_scheme']) && !in_array($this->container['card_scheme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_scheme', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['card_number'] === null) {
            $invalidProperties[] = "'card_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_option_id
     *
     * @return int|null
     */
    public function getCardOptionId()
    {
        return $this->container['card_option_id'];
    }

    /**
     * Sets card_option_id
     *
     * @param int|null $card_option_id The card option identifier
     *
     * @return $this
     */
    public function setCardOptionId($card_option_id)
    {
        $this->container['card_option_id'] = $card_option_id;

        return $this;
    }

    /**
     * Gets card_scheme
     *
     * @return string
     */
    public function getCardScheme()
    {
        return $this->container['card_scheme'];
    }

    /**
     * Sets card_scheme
     *
     * @param string $card_scheme The card type
     *
     * @return $this
     */
    public function setCardScheme($card_scheme)
    {
        $allowedValues = $this->getCardSchemeAllowableValues();
        if (!in_array($card_scheme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_scheme', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_scheme'] = $card_scheme;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date The card's expiration date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number The card number
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets security_number
     *
     * @return string|null
     */
    public function getSecurityNumber()
    {
        return $this->container['security_number'];
    }

    /**
     * Sets security_number
     *
     * @param string|null $security_number The Security number (CVV)
     *
     * @return $this
     */
    public function setSecurityNumber($security_number)
    {
        $this->container['security_number'] = $security_number;

        return $this;
    }

    /**
     * Gets card_label
     *
     * @return string|null
     */
    public function getCardLabel()
    {
        return $this->container['card_label'];
    }

    /**
     * Sets card_label
     *
     * @param string|null $card_label The name of the card owner
     *
     * @return $this
     */
    public function setCardLabel($card_label)
    {
        $this->container['card_label'] = $card_label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


