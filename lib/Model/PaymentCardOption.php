<?php
/**
 * PaymentCardOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CpaymentConnector\Model;

use \ArrayAccess;
use \CpaymentConnector\ObjectSerializer;

/**
 * PaymentCardOption Class Doc Comment
 *
 * @category Class
 * @description All payment card option data
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentCardOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentCardOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payment_card_option_ref' => 'string',
        'name' => 'string',
        'min_amount' => 'int',
        'max_amount' => 'int',
        'total_billing_cycles' => 'int',
        'effective_rate' => 'int',
        'card_option_group_name' => 'string',
        'card_option_group_id' => 'int',
        'card_option_group_position' => 'int',
        'postponement_delay_unit' => 'string',
        'postponement_delay' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'payment_card_option_ref' => null,
        'name' => null,
        'min_amount' => 'int64',
        'max_amount' => 'int64',
        'total_billing_cycles' => 'int32',
        'effective_rate' => 'int32',
        'card_option_group_name' => null,
        'card_option_group_id' => 'int32',
        'card_option_group_position' => 'int32',
        'postponement_delay_unit' => null,
        'postponement_delay' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_card_option_ref' => 'paymentCardOptionRef',
        'name' => 'name',
        'min_amount' => 'minAmount',
        'max_amount' => 'maxAmount',
        'total_billing_cycles' => 'totalBillingCycles',
        'effective_rate' => 'effectiveRate',
        'card_option_group_name' => 'cardOptionGroupName',
        'card_option_group_id' => 'cardOptionGroupId',
        'card_option_group_position' => 'cardOptionGroupPosition',
        'postponement_delay_unit' => 'postponementDelayUnit',
        'postponement_delay' => 'postponementDelay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_card_option_ref' => 'setPaymentCardOptionRef',
        'name' => 'setName',
        'min_amount' => 'setMinAmount',
        'max_amount' => 'setMaxAmount',
        'total_billing_cycles' => 'setTotalBillingCycles',
        'effective_rate' => 'setEffectiveRate',
        'card_option_group_name' => 'setCardOptionGroupName',
        'card_option_group_id' => 'setCardOptionGroupId',
        'card_option_group_position' => 'setCardOptionGroupPosition',
        'postponement_delay_unit' => 'setPostponementDelayUnit',
        'postponement_delay' => 'setPostponementDelay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_card_option_ref' => 'getPaymentCardOptionRef',
        'name' => 'getName',
        'min_amount' => 'getMinAmount',
        'max_amount' => 'getMaxAmount',
        'total_billing_cycles' => 'getTotalBillingCycles',
        'effective_rate' => 'getEffectiveRate',
        'card_option_group_name' => 'getCardOptionGroupName',
        'card_option_group_id' => 'getCardOptionGroupId',
        'card_option_group_position' => 'getCardOptionGroupPosition',
        'postponement_delay_unit' => 'getPostponementDelayUnit',
        'postponement_delay' => 'getPostponementDelay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const POSTPONEMENT_DELAY_UNIT_UNKNOWN = 'unknown';
    const POSTPONEMENT_DELAY_UNIT_DAY = 'day';
    const POSTPONEMENT_DELAY_UNIT_WEEK = 'week';
    const POSTPONEMENT_DELAY_UNIT_MONTH = 'month';
    const POSTPONEMENT_DELAY_UNIT_YEAR = 'year';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPostponementDelayUnitAllowableValues()
    {
        return [
            self::POSTPONEMENT_DELAY_UNIT_UNKNOWN,
            self::POSTPONEMENT_DELAY_UNIT_DAY,
            self::POSTPONEMENT_DELAY_UNIT_WEEK,
            self::POSTPONEMENT_DELAY_UNIT_MONTH,
            self::POSTPONEMENT_DELAY_UNIT_YEAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_card_option_ref'] = isset($data['payment_card_option_ref']) ? $data['payment_card_option_ref'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['min_amount'] = isset($data['min_amount']) ? $data['min_amount'] : null;
        $this->container['max_amount'] = isset($data['max_amount']) ? $data['max_amount'] : null;
        $this->container['total_billing_cycles'] = isset($data['total_billing_cycles']) ? $data['total_billing_cycles'] : null;
        $this->container['effective_rate'] = isset($data['effective_rate']) ? $data['effective_rate'] : null;
        $this->container['card_option_group_name'] = isset($data['card_option_group_name']) ? $data['card_option_group_name'] : null;
        $this->container['card_option_group_id'] = isset($data['card_option_group_id']) ? $data['card_option_group_id'] : null;
        $this->container['card_option_group_position'] = isset($data['card_option_group_position']) ? $data['card_option_group_position'] : null;
        $this->container['postponement_delay_unit'] = isset($data['postponement_delay_unit']) ? $data['postponement_delay_unit'] : null;
        $this->container['postponement_delay'] = isset($data['postponement_delay']) ? $data['postponement_delay'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPostponementDelayUnitAllowableValues();
        if (!is_null($this->container['postponement_delay_unit']) && !in_array($this->container['postponement_delay_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'postponement_delay_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_card_option_ref
     *
     * @return string|null
     */
    public function getPaymentCardOptionRef()
    {
        return $this->container['payment_card_option_ref'];
    }

    /**
     * Sets payment_card_option_ref
     *
     * @param string|null $payment_card_option_ref The payment card option reference
     *
     * @return $this
     */
    public function setPaymentCardOptionRef($payment_card_option_ref)
    {
        $this->container['payment_card_option_ref'] = $payment_card_option_ref;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The payment card option name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets min_amount
     *
     * @return int|null
     */
    public function getMinAmount()
    {
        return $this->container['min_amount'];
    }

    /**
     * Sets min_amount
     *
     * @param int|null $min_amount The minimum amount allowed
     *
     * @return $this
     */
    public function setMinAmount($min_amount)
    {
        $this->container['min_amount'] = $min_amount;

        return $this;
    }

    /**
     * Gets max_amount
     *
     * @return int|null
     */
    public function getMaxAmount()
    {
        return $this->container['max_amount'];
    }

    /**
     * Sets max_amount
     *
     * @param int|null $max_amount The maximum amount allowed
     *
     * @return $this
     */
    public function setMaxAmount($max_amount)
    {
        $this->container['max_amount'] = $max_amount;

        return $this;
    }

    /**
     * Gets total_billing_cycles
     *
     * @return int|null
     */
    public function getTotalBillingCycles()
    {
        return $this->container['total_billing_cycles'];
    }

    /**
     * Sets total_billing_cycles
     *
     * @param int|null $total_billing_cycles The total billing cycles
     *
     * @return $this
     */
    public function setTotalBillingCycles($total_billing_cycles)
    {
        $this->container['total_billing_cycles'] = $total_billing_cycles;

        return $this;
    }

    /**
     * Gets effective_rate
     *
     * @return int|null
     */
    public function getEffectiveRate()
    {
        return $this->container['effective_rate'];
    }

    /**
     * Sets effective_rate
     *
     * @param int|null $effective_rate The effective rate
     *
     * @return $this
     */
    public function setEffectiveRate($effective_rate)
    {
        $this->container['effective_rate'] = $effective_rate;

        return $this;
    }

    /**
     * Gets card_option_group_name
     *
     * @return string|null
     */
    public function getCardOptionGroupName()
    {
        return $this->container['card_option_group_name'];
    }

    /**
     * Sets card_option_group_name
     *
     * @param string|null $card_option_group_name The card option group name
     *
     * @return $this
     */
    public function setCardOptionGroupName($card_option_group_name)
    {
        $this->container['card_option_group_name'] = $card_option_group_name;

        return $this;
    }

    /**
     * Gets card_option_group_id
     *
     * @return int|null
     */
    public function getCardOptionGroupId()
    {
        return $this->container['card_option_group_id'];
    }

    /**
     * Sets card_option_group_id
     *
     * @param int|null $card_option_group_id The card option group identifier
     *
     * @return $this
     */
    public function setCardOptionGroupId($card_option_group_id)
    {
        $this->container['card_option_group_id'] = $card_option_group_id;

        return $this;
    }

    /**
     * Gets card_option_group_position
     *
     * @return int|null
     */
    public function getCardOptionGroupPosition()
    {
        return $this->container['card_option_group_position'];
    }

    /**
     * Sets card_option_group_position
     *
     * @param int|null $card_option_group_position The card option group position
     *
     * @return $this
     */
    public function setCardOptionGroupPosition($card_option_group_position)
    {
        $this->container['card_option_group_position'] = $card_option_group_position;

        return $this;
    }

    /**
     * Gets postponement_delay_unit
     *
     * @return string|null
     */
    public function getPostponementDelayUnit()
    {
        return $this->container['postponement_delay_unit'];
    }

    /**
     * Sets postponement_delay_unit
     *
     * @param string|null $postponement_delay_unit The postponement lenght type
     *
     * @return $this
     */
    public function setPostponementDelayUnit($postponement_delay_unit)
    {
        $allowedValues = $this->getPostponementDelayUnitAllowableValues();
        if (!is_null($postponement_delay_unit) && !in_array($postponement_delay_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'postponement_delay_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['postponement_delay_unit'] = $postponement_delay_unit;

        return $this;
    }

    /**
     * Gets postponement_delay
     *
     * @return int|null
     */
    public function getPostponementDelay()
    {
        return $this->container['postponement_delay'];
    }

    /**
     * Sets postponement_delay
     *
     * @param int|null $postponement_delay The postponement lenght
     *
     * @return $this
     */
    public function setPostponementDelay($postponement_delay)
    {
        $this->container['postponement_delay'] = $postponement_delay;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


