<?php
/**
 * Card3DsPaymentResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CpaymentConnector\Model;

use \ArrayAccess;
use \CpaymentConnector\ObjectSerializer;

/**
 * Card3DsPaymentResponse Class Doc Comment
 *
 * @category Class
 * @description The card payment response
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Card3DsPaymentResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Card3DsPaymentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card3ds_payment_request_id' => 'string',
        'card3ds_redirection_data' => '\CpaymentConnector\Model\RedirectionData',
        'card_enrollment_response_code' => 'string',
        'response_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'card3ds_payment_request_id' => null,
        'card3ds_redirection_data' => null,
        'card_enrollment_response_code' => null,
        'response_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card3ds_payment_request_id' => 'card3dsPaymentRequestId',
        'card3ds_redirection_data' => 'card3dsRedirectionData',
        'card_enrollment_response_code' => 'cardEnrollmentResponseCode',
        'response_message' => 'responseMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card3ds_payment_request_id' => 'setCard3dsPaymentRequestId',
        'card3ds_redirection_data' => 'setCard3dsRedirectionData',
        'card_enrollment_response_code' => 'setCardEnrollmentResponseCode',
        'response_message' => 'setResponseMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card3ds_payment_request_id' => 'getCard3dsPaymentRequestId',
        'card3ds_redirection_data' => 'getCard3dsRedirectionData',
        'card_enrollment_response_code' => 'getCardEnrollmentResponseCode',
        'response_message' => 'getResponseMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CARD_ENROLLMENT_RESPONSE_CODE_UNKNOWN = 'unknown';
    const CARD_ENROLLMENT_RESPONSE_CODE_ENROLLED = 'enrolled';
    const CARD_ENROLLMENT_RESPONSE_CODE_NOT_ENROLLED = 'notEnrolled';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardEnrollmentResponseCodeAllowableValues()
    {
        return [
            self::CARD_ENROLLMENT_RESPONSE_CODE_UNKNOWN,
            self::CARD_ENROLLMENT_RESPONSE_CODE_ENROLLED,
            self::CARD_ENROLLMENT_RESPONSE_CODE_NOT_ENROLLED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card3ds_payment_request_id'] = isset($data['card3ds_payment_request_id']) ? $data['card3ds_payment_request_id'] : null;
        $this->container['card3ds_redirection_data'] = isset($data['card3ds_redirection_data']) ? $data['card3ds_redirection_data'] : null;
        $this->container['card_enrollment_response_code'] = isset($data['card_enrollment_response_code']) ? $data['card_enrollment_response_code'] : null;
        $this->container['response_message'] = isset($data['response_message']) ? $data['response_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCardEnrollmentResponseCodeAllowableValues();
        if (!is_null($this->container['card_enrollment_response_code']) && !in_array($this->container['card_enrollment_response_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_enrollment_response_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card3ds_payment_request_id
     *
     * @return string|null
     */
    public function getCard3dsPaymentRequestId()
    {
        return $this->container['card3ds_payment_request_id'];
    }

    /**
     * Sets card3ds_payment_request_id
     *
     * @param string|null $card3ds_payment_request_id The paymentRequest identifier (Use to 3DS)
     *
     * @return $this
     */
    public function setCard3dsPaymentRequestId($card3ds_payment_request_id)
    {
        $this->container['card3ds_payment_request_id'] = $card3ds_payment_request_id;

        return $this;
    }

    /**
     * Gets card3ds_redirection_data
     *
     * @return \CpaymentConnector\Model\RedirectionData|null
     */
    public function getCard3dsRedirectionData()
    {
        return $this->container['card3ds_redirection_data'];
    }

    /**
     * Sets card3ds_redirection_data
     *
     * @param \CpaymentConnector\Model\RedirectionData|null $card3ds_redirection_data card3ds_redirection_data
     *
     * @return $this
     */
    public function setCard3dsRedirectionData($card3ds_redirection_data)
    {
        $this->container['card3ds_redirection_data'] = $card3ds_redirection_data;

        return $this;
    }

    /**
     * Gets card_enrollment_response_code
     *
     * @return string|null
     */
    public function getCardEnrollmentResponseCode()
    {
        return $this->container['card_enrollment_response_code'];
    }

    /**
     * Sets card_enrollment_response_code
     *
     * @param string|null $card_enrollment_response_code Gets or Sets checkCard3DEnrollmentCode
     *
     * @return $this
     */
    public function setCardEnrollmentResponseCode($card_enrollment_response_code)
    {
        $allowedValues = $this->getCardEnrollmentResponseCodeAllowableValues();
        if (!is_null($card_enrollment_response_code) && !in_array($card_enrollment_response_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_enrollment_response_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_enrollment_response_code'] = $card_enrollment_response_code;

        return $this;
    }

    /**
     * Gets response_message
     *
     * @return string|null
     */
    public function getResponseMessage()
    {
        return $this->container['response_message'];
    }

    /**
     * Sets response_message
     *
     * @param string|null $response_message The response code of the service
     *
     * @return $this
     */
    public function setResponseMessage($response_message)
    {
        $this->container['response_message'] = $response_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


